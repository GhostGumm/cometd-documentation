<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd
                             http://www.w3.org/1999/xlink http://docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:id="java_server_context">
<info>
<title>Contextual Information</title>
</info>
<para>
    Server-side components such as services (see <xref linkend="java_server_services" />),
    extensions (see <xref linkend="extensions" />)
    or authorizers (see <xref linkend="java_server_authorizers" />) may need to access contextual information,
    that is information provided by the Servlet environment such as request attributes, HTTP session attributes,
    servlet context attributes or network address information.
</para>
<para>
    While the Servlet model can easily provide such information, CometD can use also non-HTTP transports such as
    WebSocket that may not have such information readily available. CometD abstracts the retrieval of
    contextual information for any transport via the <classname>org.cometd.bayeux.server.BayeuxContext</classname>
    class.
</para>
<para>
    An instance of <code>BayeuxContext</code> can be obtained from the <code>BayeuxServer</code> instance:
</para>
<informalexample>
<programlisting language="java"><![CDATA[
BayeuxContext context = bayeuxServer.getContext();
]]></programlisting>
</informalexample>
<para>
    A typical usage in a <code>SecurityPolicy</code> (see <xref linkend="java_server_authorization" />)
    is the following:
</para>
<informalexample>
<programlisting language="java"><![CDATA[
public class OneClientPerAddressSecurityPolicy extends DefaultSecurityPolicy
{
    private final Set<String> addresses = new HashSet<String>();

    @Override
    public boolean canHandshake(BayeuxServer bayeuxServer, ServerSession session, ServerMessage message)
    {
        BayeuxContext context = bayeuxServer.getContext();

        // Get the remote address of the client
        final String remoteAddress = context.getRemoteAddress().getHostName();

        // Only allow clients from different remote addresses

        boolean notPresent = addresses.add(remoteAddress);

        // Avoid to leak addresses
        session.addListener(new ServerSession.RemoveListener()
        {
            public void removed(ServerSession session, boolean timeout);
            {
                addresses.remove(remoteAddress);
            }
        });

        return notPresent ? true : false;
    }
}
]]></programlisting>
</informalexample>
<para>
    Refer to the <link xl:href="http://docs.cometd.org/apidocs">Javadoc documentation</link>
    for further information about methods available in <code>BayeuxContext</code>.
</para>
<para>
    It is recommended to always call <code>BayeuxServer.getContext()</code> to obtain the
    <code>BayeuxContext</code> instance; it should never be cached and then reused across messages.
    This allows maximum portability of your code in case you're using a mix of WebSocket and HTTP transports.
</para>

<section>
<info>
    <title>HTTP Contextual Information</title>
</info>
<para>
    For pure HTTP transports such as <code>long-polling</code> and <code>callback-polling</code>, there is
    a direct link between the information contained in the <code>BayeuxContext</code> and the current HTTP
    request that carried the Bayeux message.
</para>
<para>
    For these transports, the <code>BayeuxContext</code> is created anew for every invocation of
    <code>BayeuxServer.getContext()</code>, wrapping the current <code>HttpServletRequest</code>.
</para>
</section>

<section>
<info>
    <title>WebSocket Contextual Information</title>
</info>
<para>
    For the WebSocket transport, the <code>BayeuxContext</code> instance is created only once, during the
    upgrade from HTTP to WebSocket.
    The information contained in the HTTP upgrade request is copied into the <code>BayeuxContext</code>
    instance and never updated again, since after the upgrade the protocol is WebSocket, and such
    contextual information is not available anymore.
</para>
</section>

</section>
