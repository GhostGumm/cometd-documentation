<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xml:id="java_server_configuration">
<info>
    <title>Configuration</title>
</info>
<para>
    You can specify <code>BayeuxServer</code> and server transport parameters in <code>web.xml</code> as init
    parameters of the <classname>org.cometd.server.CometdServlet</classname>.
    If the CometD servlet creates the <code>BayeuxServer</code> instance, the servlet init parameters are passed
    to the <code>BayeuxServer</code> instance, which in turn configures the server transports.
</para>
<para>
    If you followed the <xref linkend="primer" />, Maven has configured the <code>web.xml</code> file for you;
    here are details its configuration, a sample <code>web.xml</code>:
</para>
<para>
<informalexample>
<programlisting language="xml"><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://java.sun.com/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
         version="2.5">

    <servlet>
        <servlet-name>cometd</servlet-name>
        <servlet-class>org.cometd.server.CometdServlet</servlet-class>
        <init-param>
            <param-name>timeout</param-name>
            <param-value>60000</param-value>
        </init-param>
        <init-param>
            <param-name>logLevel</param-name>
            <param-value>3</param-value>
        </init-param>
    </servlet>
    <servlet-mapping>
        <servlet-name>cometd</servlet-name>
        <url-pattern>/cometd/*</url-pattern>
    </servlet-mapping>

</web-app>
]]></programlisting>
</informalexample>
</para>
<para>
    You must define and map the <classname>org.cometd.server.CometdServlet</classname> in <code>web.xml</code>
    to enable the server to interpret the Bayeux protocol.
    It is normally mapped on <code>/cometd/*</code>, but you can change the mapping url-pattern if you prefer.
</para>
<section>
<info>
    <title><code>BayeuxServer</code> Configuration</title>
</info>
<para>
    Here is the list of configuration init parameters that the <code>BayeuxServer</code> implementation accepts:
</para>
<informaltable>
<thead>
<tr>
  <th>Parameter Name</th>
  <th>Default Value</th>
  <th>Since</th>
  <th>Parameter Description</th>
</tr>
</thead>
<tbody>
<tr>
  <td>logLevel</td>
  <td>0</td>
  <td>2.0.0</td>
  <td>The log level: 0 = off, 1 = config, 2 = info, 3 = debug.</td>
</tr>
<tr>
  <td>transports</td>
  <td>empty string</td>
  <td>2.2.0</td>
  <td>
      A comma-separated list of <code>ServerTransport</code> implementation class names (that take a
      <code>org.cometd.server.BayeuxServerImpl</code> as only constructor parameter) to add to the
      default server transports.
  </td>
</tr>
<tr>
  <td>allowedTransports</td>
  <td>empty string</td>
  <td>2.2.0</td>
  <td>
      A comma-separated list of <code>ServerTransport</code>s names allowed.
      If not specified, the default server transports are allowed.
  </td>
</tr>
<tr>
  <td>jsonContext</td>
  <td><code>org.cometd.server.JettyJSONContextServer</code></td>
  <td>2.4.0</td>
  <td>
      The full qualified name of a class implementing <code>org.cometd.common.JSONContext.Server</code>.
      The class is loaded and instantiated using the default constructor.
  </td>
</tr>
</tbody>
</informaltable>
</section>
<section>
<info>
    <title>Server Transport Configuration</title>
</info>
<para>
    In CometD 2 the server transports are pluggable. You can configure them using parameters that may have a
    prefix that specifies the transport that the parameter refers to.
</para>
<para>
    For example, the parameter <code>timeout</code> has no prefix, and hence it is valid for all transports;
    the parameter <code>long-polling.jsonp.timeout</code> overrides the <code>timeout</code> parameter for the
    callback polling transport only, while <code>ws.timeout</code> overrides it for the websocket transport
    (see <classname>org.cometd.bayeux.Transport</classname>
    <link xl:href="http://download.cometd.org/bayeux-api/org/cometd/bayeux/Transport.html">javadocs</link> for details).
</para>
<para>
    Here is the list of configuration init parameters that server transports accept:
</para>
<informaltable>
<thead>
<tr>
  <th>Parameter Name</th>
  <th>Default Value</th>
  <th>Parameter Description</th>
</tr>
</thead>
<tbody>
<tr>
  <td>timeout</td>
  <td>30000</td>
  <td>
      The time, in milliseconds, that a server waits for a message before responding to a
      long poll with an empty response.
  </td>
</tr>
<tr>
  <td>ws.timeout</td>
  <td>15000</td>
  <td>Like the timeout parameter, but for the websocket transport.</td>
</tr>
<tr>
  <td>interval</td>
  <td>0</td>
  <td>
      The time, in milliseconds, that the client must wait between the
      end of one long poll request and the start of the next.
  </td>
</tr>
<tr>
  <td>ws.interval</td>
  <td>2500</td>
  <td>Like the interval parameter but for the websocket transport.</td>
</tr>
<tr>
  <td>maxInterval</td>
  <td>10000</td>
  <td>
      The maximum period of time, in milliseconds, that the server waits for a new long poll
      from a client before that client is considered invalid and is removed.
  </td>
</tr>
<tr>
  <td>ws.maxInterval</td>
  <td>15000</td>
  <td>Like the maxInterval parameter, but for the websocket transport.</td>
</tr>
<tr>
  <td>maxLazyTimeout</td>
  <td>5000</td>
  <td>
      The maximum period of time, in milliseconds, that the server waits before delivering or
      publishing lazy messages.
  </td>
</tr>
<tr>
  <td>metaConnectDeliverOnly</td>
  <td>false</td>
  <td>Whether the transport should deliver the messages only via long poll (enables strict message ordering).</td>
</tr>
<tr>
  <td>jsonDebug</td>
  <td>false</td>
  <td>Whether or not the full JSON input should be kept for debugging purposes.</td>
</tr>
<tr>
  <td>maxSessionsPerBrowser</td>
  <td>1</td>
  <td>
      The max number of sessions (tab/frames) allowed to long poll from the same browser; a negative value
      allows unlimited sessions (see also <xref linkend="java_server_multiple_sessions" />).
  </td>
</tr>
<tr>
  <td>allowMultiSessionsNoBrowser</td>
  <td>false</td>
  <td>
      Whether to allow multiple sessions (tab/frames) in case the browser cannot be detected
      (see also <xref linkend="java_server_multiple_sessions" />).
  </td>
</tr>
<tr>
  <td>multiSessionInterval</td>
  <td>2000</td>
  <td>
      The period of time, in milliseconds, that specifies the client normal polling period in case the server detects
      more sessions (tabs/frames) connected from the same browser than allowed by the
      <code>maxSessionsPerBrowser</code> parameter.
      A non-positive value means that additional sessions are disconnected.
  </td>
</tr>
<tr>
  <td>long-polling.json.metaConnectDeliverOnly</td>
  <td>false</td>
  <td>
      Whether or not delivery of messages should only happen via <code>/meta/connect</code>.
      Enabling this option allows for strict message ordering at the cost of a slightly chattier protocol
      (because delivery via <code>/meta/connect</code> requires waking up the long poll).
  </td>
</tr>
</tbody>
</informaltable>
<section>
<info>
    <title>Advanced Configuration</title>
</info>
<para>
    If you are using <link xl:href="http://eclipse.org/jetty">Jetty 7</link>, you might want to configure the
    <code>CrossOriginFilter</code>.
    This filter implements the
    <link xl:href="http://www.w3.org/TR/access-control/">Cross-Origin Resource Sharing</link> specification,
    and allows recent browsers that implement it (as of November 2009, Firefox 3.5.x, Chrome 3.x and Safari 4.x)
    to perform cross-domain JavaScript requests (see <xref linkend="javascript_transports" />).
</para>
<para>
    Here is an example of <code>web.xml</code> configuration for the <code>CrossOriginFilter</code>:
</para>
<informalexample>
<programlisting language="xml"><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://java.sun.com/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
         version="2.5">

    <servlet>
        <servlet-name>cometd</servlet-name>
        <servlet-class>org.cometd.server.continuation.ContinuationCometdServlet</servlet-class>
        <init-param>
            <param-name>timeout</param-name>
            <param-value>60000</param-value>
        </init-param>
    </servlet>
    <servlet-mapping>
        <servlet-name>cometd</servlet-name>
        <url-pattern>/cometd/*</url-pattern>
    </servlet-mapping>

    <filter>
        <filter-name>cross-origin</filter-name>
        <filter-class>org.eclipse.jetty.servlets.CrossOriginFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>cross-origin</filter-name>
        <url-pattern>/cometd/*</url-pattern>
    </filter-mapping>

</web-app>
]]></programlisting>
</informalexample>
<para>
    Refer to the
    <link xl:href="http://wiki.eclipse.org/Jetty/Feature/Cross_Origin_Filter">Jetty Cross Origin Filter documentation</link>
    for the filter configuration.
</para>
</section>
</section>
<section>
<info>
<title>Servlet 3 Configuration</title>
</info>
<para>
    <!-- TODO: relink to the docbook section -->
    Refer to <link xl:href="http://cometd.org/node/106"> CometD and Servlet3 Compliant Containers with Jetty Continuations</link>.
</para>
</section>
</section>
