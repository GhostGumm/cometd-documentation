<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd"
         xml:id="java_client_handshake">
<info>
    <title>Handshaking</title>
</info>
<para>
To initiate the communication with the Bayeux server, you need to call:
</para>
<informalexample>
<programlisting language="java"><![CDATA[
BayeuxClient.handshake()
]]></programlisting>
</informalexample>
<para>
The following is a typical use:
</para>
<informalexample>
<programlisting language="java"><![CDATA[
// Create (and eventually set up) Jetty's HttpClient:
HttpClient httpClient = new HttpClient();
// Here set up Jetty's HttpClient, for example:
// httpClient.setMaxConnectionsPerAddress(2);
httpClient.start();

// Prepare the transport
Map<String, Object> options = new HashMap<String, Object>();
ClientTransport transport = new LongPollingTransport(options, httpClient);

// Create the BayeuxClient
ClientSession client = new BayeuxClient("http://localhost:8080/cometd", transport);

// Here set up the BayeuxClient, for example:
// client.getChannel(Channel.META_CONNECT).addListener(new ClientSessionChannel.MessageListener() { ... });
]]></programlisting>
</informalexample>
<para>
    <code>BayeuxClient</code> must be instantiated passing the absolute URL (and therefore including the scheme,
    host, optionally the port and the path) of the Bayeux server.
    The scheme of the URL must always be either "http" or "https". The CometD Java Client implementation will
    transparently take care of converting the scheme to "ws" or "wss" in case of usage of the WebSocket protocol.
</para>
<para>
    When <code>BayeuxClient.handshake()</code> is called, the <code>BayeuxClient</code> performs the handshake
    with the Bayeux server and establishes the long poll connection asynchronously.
</para>
<note>
<para>
    Calling <code>handshake()</code> <emphasis role="bold">does not</emphasis> mean that you have completed the
    handshake with the server when <code>handshake()</code> returns.
</para>
</note>
<para>
    To verify that the handshake is successful, you can pass a callback <code>MessageListener</code> to
    <code>BayeuxClient.handshake()</code>:
</para>
<informalexample>
<programlisting language="java"><![CDATA[
ClientTransport transport = ...
ClientSession client = new BayeuxClient("http://localhost:8080/cometd", transport);
client.handshake(new ClientSessionChannel.MessageListener()
{
    public void onMessage(ClientSessionChannel channel, Message message)
    {
        if (message.isSuccessful())
        {
            // Here handshake is successful
        }
    }
});
]]></programlisting>
</informalexample>
<para>
    An alternative, equivalent, way is to add a <code>MessageListener</code> before calling
    <code>BayeuxClient.handshake()</code>:
</para>
<informalexample>
<programlisting language="java"><![CDATA[
ClientTransport transport = ...
ClientSession client = new BayeuxClient("http://localhost:8080/cometd", transport);
client.getChannel(Channel.META_HANDSHAKE).addListener(new ClientSessionChannel.MessageListener()
{
    public void onMessage(ClientSessionChannel channel, Message message)
    {
        if (message.isSuccessful())
        {
            // Here handshake is successful
        }
    }
});
client.handshake();
]]></programlisting>
</informalexample>
<para>
    Another alternative is to use the built-in synchronous features of the <code>BayeuxClient</code>
    and wait for the handshake to complete:
</para>
<informalexample>
<programlisting language="java"><![CDATA[
ClientTransport transport = ...
BayeuxClient client = new BayeuxClient("http://localhost:8080/cometd", transport);
client.handshake();
boolean handshaken = client.waitFor(1000, BayeuxClient.State.CONNECTED);
if (handshaken)
{
    // Here handshake is successful
}
]]></programlisting>
</informalexample>
<para>
    The <code>BayeuxClient.waitFor()</code> method waits the given timeout (in milliseconds) for the
    <code>BayeuxClient</code> to reach the given state, and returns true if the state is reached before
    the timeout expires.
</para>
</section>
