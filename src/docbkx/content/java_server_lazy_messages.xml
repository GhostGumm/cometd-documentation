<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd"
         xml:id="java_server_lazy_messages">
<info>
    <title>Lazy Channels and Messages</title>
</info>
<para>
    Sometimes applications need to send non-urgent messages to clients; alert messages
    such as "email received" or "server uptime", are typical examples, but chat messages sometimes also fit this definition.
    While these messages need to reach the client(s) eventually, there is no need to deliver them immediately:
    they are queued into the <code>ServerSession</code>'s message queue, but their delivery can be postponed
    to the first occasion.
</para>
<para>
    In CometD, "first occasion" means whichever of the following things occurs first (see
    <xref linkend="java_server_configuration" /> for information about configuring the following parameters):
</para>
<itemizedlist>
<listitem>
<para>
    the channel's lazy timeout expires
</para>
</listitem>
<listitem>
<para>
    the <code>/meta/connect</code> timeout expires so that the <code>/meta/connect</code> response is sent to the client
</para>
</listitem>
<listitem>
<para>
    another non-lazy message triggered the <code>ServerSession</code>'s message queue to be sent to the client
</para>
</listitem>
</itemizedlist>
<para>
    To support this feature, CometD introduces the concepts of <emphasis>lazy channel</emphasis> and
    <emphasis>lazy messages</emphasis>.
</para>
<para>
    An application can mark a message as lazy by calling <code>ServerMessage.Mutable.setLazy(true)</code> on
    the message instance itself, for example:
</para>
<informalexample>
<programlisting language="java"><![CDATA[
@Service
public class LazyService
{
    @Inject
    private BayeuxServer bayeuxServer;
    @Session
    private LocalSession session;

    public void receiveNewsFromExternalSystem(NewsInfo news)
    {
        ServerMessage.Mutable message = this.bayeuxServer.newMessage();
        message.setChannel("/news");
        message.setData(news);
        message.setLazy(true);
        this.bayeuxServer.getChannel("/news").publish(this.session, message);
    }
}
]]></programlisting>
</informalexample>
<para>
    In this example, an external system invokes method <code>LazyService.receiveNewsFromExternalSystem(...)</code>
    every time there is news, and the service broadcasts
    the news to all interested clients.
    However, since the news need not be delivered immediately, the message is marked as lazy.
    Each remote client possibly receives the message at a different time: some receive it
    immediately (because, for example, they have other non-lazy messages to be delivered), some
    receive it after few milliseconds (because, for example, their <code>/meta/connect</code> timeout
    expires in a few milliseconds), while others receive it only upon the whole <code>maxLazyInterval</code> timeout.
</para>
<para>
    In the same way you can mark a message as lazy, you can also mark server channels as lazy.
    Every message that is published to a lazy channel becomes a lazy message which is then queued
    into the <code>ServerSession</code>'s message queue for delivery on first occasion.
</para>
<para>
    You can mark server channels as lazy at any time, but it is best to configure them as lazy at
    creation time, for example:
</para>
<informalexample>
<programlisting language="java"><![CDATA[
@Service
public class LazyService
{
    @Inject
    private BayeuxServer bayeuxServer;
    @Session
    private LocalSession session;

    @Configure("/news")
    public void setupNewsChannel(ConfigurableServerChannel channel)
    {
        channel.setLazy(true);
    }

    public void receiveNewsFromExternalSystem(NewsInfo news)
    {
        this.bayeuxServer.getChannel("/news").publish(this.session, news, null);
    }
}
]]></programlisting>
</informalexample>
<para>
    When a server channel is marked lazy, by default it has a lazy timeout specified by the global
    <code>maxLazyTimeout</code> parameter (see <xref linkend="java_server_configuration" />).
</para>
<para>
    In more sophisticated cases, you may want to specify different lazy timeouts for different server channels,
    for example:
</para>
<informalexample>
<programlisting language="java"><![CDATA[
@Service
public class LazyService
{
    ...

    @Configure("/news")
    public void setupNewsChannel(ConfigurableServerChannel channel)
    {
        channel.setLazy(true);
    }

    @Configure("/chat")
    public void setupChatChannel(ConfigurableServerChannel channel)
    {
        channel.setLazyTimeout(2000);
    }

    ...
}
]]></programlisting>
</informalexample>
<para>
    In the example above, channel <code>/news</code> inherits the default <code>maxLazyTimeout</code> (5000 ms),
    while the <code>/chat</code> channel is configured with a specific lazy timeout of 2000 ms.
    A server channel that has a non-zero, positive lazy timeout is automatically marked as lazy.
</para>
<para>
    If a wildcard server channel such as <code>/chat/*</code> is marked as lazy, then all messages sent to server
    channels that match that wildcard server channel (such as <code>/chat/1</code>) will be lazy.
    Conversely, if a non-wildcard server channel such as <code>/news</code> is lazy, then all messages sent to
    children server channels of that non-wildcard server channel (such as <code>/news/sport</code>) will not be lazy.
</para>

</section>
