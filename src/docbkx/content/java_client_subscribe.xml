<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd"
         xml:id="java_client_subscribe">
<info>
    <title>Subscribing and Unsubscribing</title>
</info>
<para>
    The following sections provide information about subscribing and unsubscribing to channels.
</para>
<section>
<info>
    <title>Subscribing to Broadcast Channels</title>
</info>
<para>
    Subscribing (or unsubscribing) involves first retrieving the channel you want to subscribe to
    (or unsubscribe from) and then calling the <code>subscribe()</code> (or <code>unsubscribe()</code>) methods:
</para>
<informalexample>
<programlisting language="java"><![CDATA[
public class Example
{
    private static final String CHANNEL = "/foo";
    private final ClientSessionChannel.MessageListener fooListener = new FooListener();

    public void attach()
    {
        ClientTransport transport = ...
        ClientSession client = new BayeuxClient("http://localhost:8080/cometd", transport);
        client.handshake();
        boolean handshaken = client.waitFor(1000, BayeuxClient.State.CONNECTED);
        if (handshaken)
        {
            client.getChannel(CHANNEL).subscribe(fooListener);
        }
    }

    private static class FooListener implements ClientSessionChannel.MessageListener
    {
        public void onMessage(ClientSessionChannel channel, Message message)
        {
            // Here we received a message on the channel
        }
    }
}
]]></programlisting>
</informalexample>
<note>
<para>
    You can subscribe and unsubscribe only after the handshake is completed.
    Calling <code>subscribe()</code> (or <code>unsubscribe()</code> <emphasis role="bold">does not</emphasis>
    mean that you have completed the subscription (or unsubscription) with the server when the method returns.
</para>
</note>
<para>
    Unsubscribing is straightforward: if you unsubscribe to a channel, CometD does not deliver messages
    on that channel to message listeners.
    Using the <code>Example</code> class above:
</para>
<informalexample>
<programlisting language="java"><![CDATA[
public class Example
{
    ...
    public void detach()
    {
        client.getChannel(CHANNEL).unsubscribe(fooListener);
    }
}
]]></programlisting>
</informalexample>
<para>
    If you need to know whether your subscription (or unsubscription) was received and processed by the server,
    you can pass a callback <code>MessageListener</code> to the <code>subscribe()</code> (or
    <code>unsubscribe()</code>) methods:
</para>
<informalexample>
<programlisting language="java"><![CDATA[
final BayeuxClient client = ...;
final ClientSessionChannel.MessageListener messageHandler = ...;
client.handshake(new ClientSessionChannel.MessageListener()
{
    public void onMessage(ClientSessionChannel channel, Message message)
    {
        if (message.isSuccessful())
        {
            // Subscribe
            client.getChannel("/foo").subscribe(messageHandler, new ClientSessionChannel.MessageListener()
            {
                public void onMessage(ClientSessionChannel channel, Message message)
                {
                    if (message.isSuccessful())
                    {
                        // Subscription successful.
                    }
                }
            }
        }
    }
});
]]></programlisting>
</informalexample>
<para>
    As in <xref linkend="javascript_subscribe" />, a good place to perform subscriptions is a
    <code>handshake(...)</code> callback or a <code>/meta/handshake</code> listener, because they are invoked
    transparently if the server requests a new handshake.
</para>
<para>
    Applications do not need to unsubscribe in case of re-handshake; the CometD library removes
    the subscriptions upon re-handshake, so that when the <code>/meta/handshake</code> listener executes again
    the subscriptions are correctly restored (and not duplicated).
</para>
</section>
<section>
<info>
    <title>Listening to Meta Channels</title>
</info>
<para>
    The internal implementation of the Bayeux protocol uses meta channels, and it does not make any sense to
    subscribe to them because they are not broadcast channels.
    It does make sense, however, to listen to messages that arrive on those channels.
</para>
<informalexample>
<programlisting language="java"><![CDATA[
public class Example
{
    public void init()
    {
        ClientSession client = ...;
        client.getChannel(Channel.META_HANDSHAKE).addListener(new ClientSessionChannel.MessageListener()
        {
            public void onMessage(ClientSessionChannel channel, Message message)
            {
                // Here we received a handshake response message
            }
        });
    }
}
]]></programlisting>
</informalexample>
</section>
</section>
