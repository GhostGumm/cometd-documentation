<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd
                             http://www.w3.org/1999/xlink http://docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:id="javascript_transports">
<info>
    <title>JavaScript Transports</title>
</info>
<para>
    <xref linkend="bayeux" /> defines two mandatory
    transports: <code>long-polling</code> and <code>callback-polling</code>.
</para>
<para>
    The JavaScript CometD implementation implements these two transports and supports also the <code>websocket</code>
    transport (based on HTML 5 <link xl:href="http://en.wikipedia.org/wiki/WebSockets">WebSockets</link>).
</para>
<note>
<para>
    At the time of this writing, the IETF has finalized the WebSocket protocol into
    <link xl:href="http://www.ietf.org/rfc/rfc6455.txt">RFC 6455</link>.
    However, most of the browsers still implement earlier drafts of the WebSocket protocol, so browser support
    varies (most notably, Microsoft's Internet Explorer only supports WebSocket out of the box in version 10).
    CometD falls back to <code>long-polling</code> if the <code>websocket</code> transport does not work.
</para>
</note>

<section>
<info>
    <title>The <code>long-polling</code> Transport</title>
</info>
<para>
    The <code>long-polling</code> transport is the default transport if the browser and the server do not support
    WebSockets.
    This transport is used when the communication with the Bayeux server happens on the same domain, and also in the
    cross-domain mode for recent browsers, such as Firefox 3.5+ (see <xref linkend="javascript_transports_cross_origin" />).
    The data is sent to the server by means of a POST request with Content-Type <code>application/json</code>
    via a plain XMLHttpRequest call.
</para>
</section>

<section>
<info>
    <title>The <code>callback-polling</code> Transport</title>
</info>
<para>
    The <code>callback-polling</code> transport is used when the communication with the Bayeux server happens on a
    different domain and when the cross-domain mode is not supported
    (see <xref linkend="javascript_transports_cross_origin" />).
</para>
<para>
    It is well known that XMLHttpRequest calls have restrictions when the invocation is directed to a domain different
    from the one to which the script has been downloaded (but, again, see <xref linkend="javascript_transports_cross_origin" />
    for an alternative solution).
    To overcome XMLHttpRequest restrictions, this transport uses the JSONP script injection, which injects a
    <code>&lt;script&gt;</code> element whose <code>src</code> attribute points to the Bayeux server.
    The browser notices the script element injection and performs a GET request to the specified source URL.
    The Bayeux server is aware that this is a JSONP request and replies with a JavaScript function that the browser
    then executes, (and calls back into the JavaScript CometD implementation).
</para>
<para>
    There are three main drawbacks in using this transport:
</para>
<itemizedlist>
<listitem>
<para>
    The transport is chatty. This is due to the fact that the browser executes the injected scripts sequentially,
    and until a script has been completely "downloaded", it cannot be executed.
    For example, imagine a communication that involves a script injection for the long poll, and a script injection
    for a message publish. The browser injects the long poll script, a request is made to the Bayeux server, but the
    Bayeux server holds the request waiting for server-side events (so the script is not downloaded). Then the
    browser injects the publish script, the request is made to the Bayeux server, which replies (so the script is
    downloaded). However, the browser does not execute the second script, because it has not executed the first yet
    (since its download is not finished). In these conditions, the publish is executed only after the long poll
    returns. To avoid this situation, the Bayeux server, in case of <code>callback-polling</code> transport, resumes
    the client's long poll for every message that arrives from that client, and that's why the transport is so chatty:
    the long poll returns more often.
</para>
</listitem>
<listitem>
<para>
    The message size is limited. This is necessary to support IE7, which has a 2083 character limit for GET requests.
</para>
</listitem>
<listitem>
<para>
    The reaction to failures is slower.This is due to the fact that if the script injection points to a URL that
    returns an error (for example, the Bayeux server is down), the browser silently ignores the error.
</para>
</listitem>
</itemizedlist>
</section>
<section>
<info>
    <title>The <code>websocket</code> Transport</title>
</info>
<para>
    The <code>websocket</code> transport is available if the browser and the server support WebSocket
    (<link xl:href="http://eclipse.org/jetty">Jetty 7 and later</link> support the WebSocket protocol).
    The WebSocket protocol is designed to be the bidirectional communication protocol for
    the web, so it is a natural fit in the CometD project.
</para>
<para>
    Since browser support has greatly improved, the <code>websocket</code> transport is enabled by
    default since CometD 2.4.0, but you can easily disable it if you experience problems.
</para>
<para>
    The easiest way of enabling/disabling the <code>websocket</code> transport is to set a boolean variable
    <emphasis>before</emphasis> performing the initial CometD handshake:
</para>
<informalexample>
<programlisting language="javascript"><![CDATA[
var cometd = dojox.cometd; // Dojo style
var cometd = $.cometd; // jQuery style

// Disable the websocket transport
cometd.websocketEnabled = false;

// Initial handshake
cometd.init('http://localhost:8080/cometd');
]]></programlisting>
</informalexample>
<para>
    An alternative way of disabling the <code>websocket</code> transport is to unregister its transport, see
    <xref linkend="javascript_transports_unregistering" />.
</para>
<important>
<para>
    Remember that enabling the <code>websocket</code> transport on the client is not enough: you must
    also enable it on the server.
    Follow <xref linkend="java_server_transports" /> for configuring <code>websocket</code> on the server.
</para>
</important>
</section>
<section xml:id="javascript_transports_unregistering">
<info>
    <title>Unregistering Transports</title>
</info>
<para>
    CometD JavaScript transports are added in the JavaScript toolkit <emphasis>bindings</emphasis> for the CometD
    JavaScript library.
</para>
<para>
    The CometD JavaScript API allows you to unregister transports, and this can be useful to force the use of only one
    transport (for example, for testing purposes), or to disable certain transports that might be unreliable.
    For example, it is possible to unregister the WebSocket transport by unregistering it with the following code:
</para>
<informalexample>
<programlisting language="javascript"><![CDATA[
var cometd = dojox.cometd; // Dojo style
var cometd = $.cometd; // jQuery style

cometd.unregisterTransport('websocket');
]]></programlisting>
</informalexample>
</section>

<section xml:id="javascript_transports_cross_origin">
<info>
    <title>The cross-domain Mode</title>
</info>
<para>
    Firefox 3.5 introduced the capability for XMLHttpRequest calls to be performed towards a different domain
    (see <link xl:href="https://developer.mozilla.org/En/HTTP_access_control">HTTP Access Control</link>).
    The JavaScript CometD implementation also supports this, with no configuration necessary on the client
    (if the browser supports XMLHttpRequest cross-domain calls, CometD uses them) and with a bit of configuration
    for the server.
    See the <link xl:href="http://wiki.eclipse.org/Jetty/Feature/Cross_Origin_Filter">Jetty Cross Origin Filter documentation</link>
    for the server configuration.
</para>
<para>
    To use the cross-domain mode, you need:
</para>
<itemizedlist>
<listitem>
    <para>A cross-domain compliant browser (for example Firefox 3.5).</para>
</listitem>
<listitem>
<para>
    A compliant server (for example, Jetty configured with the <code>CrossOriginFilter.</code>)
</para>
</listitem>
</itemizedlist>
<para>
    With this setup, even when the communication with the Bayeux server is cross-domain, CometD uses the
    <code>long-polling</code> transport, avoiding the drawbacks of the <code>callback-polling</code> transport.
</para>
</section>
</section>
