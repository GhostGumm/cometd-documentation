<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd
                             http://www.w3.org/1999/xlink http://docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:id="java_json">
<info>
    <title>JSON Libraries</title>
</info>
<para>
    Since version 2.4.0, CometD allows you to customize the JSON library that it uses to convert incoming JSON into
    Bayeux messages and generate JSON from Bayeux messages.
</para>
<para>
    Two implementations are available, one based on Jetty's
    <classname>org.eclipse.jetty.util.ajax.JSON</classname> class, and the other based on the
    <link xl:href="http://jackson.codehaus.org">Jackson</link> library.
    The default implementation uses the Jetty library.
    These two libraries are among the fastest available; it turns out that, for CometD,
    the Jackson library is faster than Jetty's in both parsing and generating. Distinctions between them include:
</para>
<itemizedlist>
<listitem>
<para>
    The Jetty library allows you to plug in custom serializers and deserializers, to fine control the conversion from object to JSON and vice versa, via a custom API.
    Refer to the <classname>org.eclipse.jetty.util.ajax.JSON</classname>
    <link xl:href="http://download.eclipse.org/jetty/stable-7/apidocs/org/eclipse/jetty/util/ajax/JSON.html">javadocs</link>
    for further information.
</para>
</listitem>
<listitem>
<para>
    The Jackson library offers a rich API based on annotations to customize JSON generation, but less so to customize JSON parsing and obtain objects of custom classes.
    Refer to the <link xl:href="http://jackson.codehaus.org/Documentation">Jackson documentation</link>
    for further details.
</para>
</listitem>
</itemizedlist>
<section xml:id="java_json_api">
<info>
    <title>JSONContext API</title>
</info>
<para>
    The CometD Java client implementation (see
    <xref linkend="java_client" />) uses the JSON library to generate JSON from and to parse JSON to
    <classname>org.cometd.bayeux.Message</classname> instances.
    The JSON library class that performs this generation/parsing on the client must implement
    <classname>org.cometd.common.JSONContext.Client</classname>.
</para>
<para>
    Similarly, on the server, a <classname>org.cometd.common.JSONContext.Server</classname> implementation
    generates JSON from and parses JSON to <classname>org.cometd.bayeux.server.ServerMessage</classname> instances.
</para>

<section xml:id="java_json_client_config">
<info>
    <title>Client Configuration</title>
</info>
<para>
    On the client, the <classname>org.cometd.common.JSONContext.Client</classname> instance must be passed
    directly into the transport configuration; if omitted, the default Jetty JSON library is used.
    For example:
</para>
<informalexample>
<programlisting language="java"><![CDATA[
HttpClient httpClient = ...;

Map<String, Object> transportOptions = new HashMap<String, Object>();

// Use the Jackson implementation
JSONContext.Client jsonContext = new JacksonJSONContextClient();
transportOptions.put(ClientTransport.JSON_CONTEXT, jsonContext);

ClientTransport transport = new LongPollingTransport(transportOptions, httpClient);

BayeuxClient client = new BayeuxClient(cometdURL, transport);
]]></programlisting>
</informalexample>
<para>
    All client transports can share the <classname>org.cometd.common.JSONContext.Client</classname> instance (since only one transport is used at any time).
</para>
<para>
    You can customize the Jackson implementation and add your own serializers/deserializer in the following way:
</para>
<informalexample>
<programlisting language="java"><![CDATA[
public class MyJacksonJSONContextClient extends org.cometd.common.JacksonJSONContextClient
{
    public MyJacksonJSONContextClient()
    {
        org.codehaus.jackson.map.ObjectMapper objectMapper = getObjectMapper();
        objectMapper.registerModule(new MyModule());
    }

    private class MyModule extends org.codehaus.jackson.map.module.SimpleModule
    {
        public MyModule()
        {
            // Add your custom serializers/deserializers here
            addSerializer(Foo.class, new FooSerializer());
        }
    }
}
]]></programlisting>
</informalexample>
</section>

<section xml:id="java_json_server_config">
<info>
    <title>Server Configuration</title>
</info>
<para>
    On the server, you can specify the fully qualified name of a class implementing
    <classname>org.cometd.common.JSONContext.Server</classname> as init-parameter of the
    <code>CometdServlet</code> (see also <xref linkend="java_server_configuration" />);
    if omitted, the default Jetty library is used.
    For example:
</para>
<informalexample>
<programlisting language="xml"><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://java.sun.com/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
         version="2.5">

    <servlet>
        <servlet-name>cometd</servlet-name>
        <servlet-class>org.cometd.server.CometdServlet</servlet-class>
        <!-- other parameters -->
        <init-param>
            <param-name>jsonContext</param-name>
            <param-value>org.cometd.server.JacksonJSONContextServer</param-value>
        </init-param>
    </servlet>
    <servlet-mapping>
        <servlet-name>cometd</servlet-name>
        <url-pattern>/cometd/*</url-pattern>
    </servlet-mapping>

</web-app>
]]></programlisting>
</informalexample>
<para>
    The class specified must be instantiable using the default parameterless constructor, and it must implement
    <classname>org.cometd.common.JSONContext.Server</classname>. You can customize it by adding
    serializers/deserializers as explained above.
</para>
</section>

<section xml:id="java_json_oort_config">
<info>
    <title>Oort Configuration</title>
</info>
<para>
    In the Oort clustering (see <xref linkend="java_oort" />), an <code>Oort</code> instance need to have
    both the server and the client<code>JSONContext</code>: the server one to deserialize messages that
    other Oort comets send, and the client one to serialize messages to send to other Oort comets.
</para>
<para>
    The <code>Oort</code> instance will use the <code>JSONContext.Server</code> already configured for the
    server, as explained in <xref linkend="java_json_server_config" />.
</para>
<para>
    The <code>Oort</code> instance will use of the <code>JSONContext.Client</code> specified in the configuration
    (see <xref linkend="java_oort_common_configuration" />).
</para>
</section>
</section>

<section>
<info>
    <title>Portability Considerations</title>
</info>
<para>
    It is possible to switch from one implementation of the JSON library to another â€“ for example from the
    Jetty library to the Jackson library, provided that you write the application code carefully.
</para>
<para>
    As of version 1.8.4, Jackson can only produce instances of <classname>java.util.List</classname> when
    deserializing JSON arrays.
    The Jetty library, however, produces <classname>java.lang.Object[]</classname> when deserializing JSON arrays.
</para>
<para>
    Similarly, Jackson produces <classname>java.lang.Integer</classname> where the Jetty library
    produces <classname>java.lang.Long</classname>.
</para>
<para>
    To write portable application code, use the following code patterns:
</para>
<informalexample>
<programlisting language="java"><![CDATA[
Message message = ...;
Map<String, Object> data = message.getDataAsMap();

// Expecting a JSON array

// WRONG
Object[] array = (Object[])data.get("array");

// CORRECT
Object field = data.get("array");
Object[] array = field instanceof List ? ((List)field).toArray() : (Object[])field;


// Expecting a long

// WRONG
long value = (Long)data.get("value");

// CORRECT
long value = ((Number)data.get("value")).longValue();
]]></programlisting>
</informalexample>

</section>

<section>
<info>
<title>
    Customizing Deserialization of JSON objects
</title>
</info>
<para>
    Sometimes it is very useful to be able to obtain objects of application classes instead of just
    <code>Map&lt;String, Object&gt;</code> when calling <code>message.getData()</code>.
</para>
<para>
    You can easily achieve this with the Jetty JSON library. It is enough that the client formats the JSON object
    adding an additional <code>class</code> field whose value is the fully qualified class name that you want to
    convert the JSON to:
</para>
<informalexample>
<programlisting language="javascript"><![CDATA[
cometd.publish('/echo', {
    class: 'org.cometd.example.EchoInfo',
    id: '42',
    echo: 'cometd'
});
]]></programlisting>
</informalexample>
<para>
    On the server, in the <code>web.xml</code> file, you register the
    <classname>org.cometd.server.JettyJSONContextServer</classname> as <code>jsonContext</code> (see
    <xref linkend="java_json_server_config" />), and at startup you add a custom converter for the
    <classname>org.cometd.example.EchoInfo</classname> class (see <xref linkend="java_server_services_integration" />
    for more details about configuring CometD at startup).
</para>
<informalexample>
<programlisting language="java"><![CDATA[
BayeuxServer bayeuxServer = ...;
JettyJSONContextServer jsonContext = (JettyJSONContextServer)bayeuxServer.getOption("jsonContext");
jsonContext.getJSON().addConvertor(EchoInfo.class, new EchoInfoConvertor());
]]></programlisting>
</informalexample>
<para>
    Finally, these are the <classname>EchoInfoConvertor</classname> and <classname>EchoInfo</classname> classes:
</para>
<informalexample>
<programlisting language="java"><![CDATA[
public class EchoInfoConvertor implements JSON.Convertor
{
    public void toJSON(Object obj, JSON.Output out)
    {
        EchoInfo echoInfo = (EchoInfo)obj;
        out.addClass(EchoInfo.class);
        out.add("id", echoInfo.getId());
        out.add("echo", echoInfo.getEcho());
    }

    public Object fromJSON(Map map)
    {
        String id = (String)map.get("id");
        String echo = (String)map.get("echo");
        return new EchoInfo(id, echo);
    }
}

public class EchoInfo
{
    private final String id;
    private final String echo;

    public EchoInfo(String id, String echo)
    {
        this.id = id;
        this.echo = echo;
    }

    public String getId()
    {
        return id;
    }

    public String getEcho()
    {
        return echo;
    }
}
]]></programlisting>
</informalexample>
<para>
    If, instead of using the JavaScript client, you are using the Java client, it is possible to configure the
    Java client to perform the serialization/deserialization of JSON objects in the same way (see also
    <xref linkend="java_json_client_config" />):
</para>
<informalexample>
<programlisting language="java"><![CDATA[
JettyJSONContextClient jsonContext = ...;
jsonContext.getJSON().addConvertor(EchoInfo.class, new EchoInfoConvertor());

// Later in the application
BayeuxClient bayeuxClient = ...;

bayeuxClient.getChannel("/echo").subscribe(new ClientSessionChannel.MessageListener()
{
    public void onMessage(ClientSessionChannel channel, Message message)
    {
        // Receive directly EchoInfo objects
        EchoInfo data = (EchoInfo)message.getData();
    }
});

// Publish directly EchoInfo objects
bayeuxClient.getChannel("/echo").publish(new EchoInfo("42", "wohoo"));
]]></programlisting>
</informalexample>

</section>
</section>
