<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xml:id="java_server_authorizers">
<info>
    <title>Server Channel Authorizers</title>
</info>
<para>
    CometD 2.1.0 introduced authorizers, a feature that allows fine-grained control of
    authorization on channel operations.
</para>

<section>
<info>
    <title>Understanding Authorizers</title>
</info>
<para>
    Authorizers are objects that implement <classname>org.cometd.bayeux.server.Authorizer</classname>;
    you add them to server-side channels at setup time (before any operation on that channel can happen)
    in the following way:
</para>
<informalexample>
<programlisting language="java"><![CDATA[
BayeuxServer bayeuxServer = ...;
bayeuxServer.createIfAbsent("/my/channel", new ConfigurableServerChannel.Initializer()
{
    public void configureChannel(ConfigurableServerChannel channel)
    {
        channel.addAuthorizer(GrantAuthorizer.GRANT_PUBLISH);
    }
});
]]></programlisting>
</informalexample>
<para>
    The utility class <classname>org.cometd.server.authorizer.GrantAuthorizer</classname> provides 
    some pre-made authorizers, but you can create your own at will.
</para>
<para>
    Authorizers are particularly suited to control authorization on those channels that CometD creates at runtime,
    or for those channels whose ID CometD builds at runtime by concatenating strings that are unknown at application
    startup (see examples below).
</para>
<itemizedlist>
<listitem>
<para>
    Authorizers do not apply to meta channels, only to service channels and to broadcast channels.
</para>
</listitem>
<listitem>
<para>
    You can add authorizers to wildcard channels (such as <code>/chat/*</code>);
    they impact all channels that match the wildcard channel on which you have added the authorizer.
</para>
</listitem>
<listitem>
<para>
    An authorizer that you add to <code>/**</code> impacts all non-meta channels.
</para>
</listitem>
<listitem>
<para>
    For a non wildcard channel such as <code>/chat/room/10</code>, the <emphasis>authorizer set</emphasis> is
    the union of all authorizers on that channel, and of all authorizers on wildcard channels that match the
    channel (in this case authorizers on channels <code>/chat/room/*</code>, <code>/chat/room/**</code>,
    <code>/chat/**</code> and <code>/**</code>).
</para>
</listitem>
</itemizedlist>
</section>

<section>
<info>
    <title>Authorization Algorithm</title>
</info>
<para>
    Authorizers control access to channels in collaboration with the
    <classname>org.cometd.bayeux.server.SecurityPolicy</classname> that is currently installed.
</para>
<para>
    The <classname>org.cometd.bayeux.server.SecurityPolicy</classname> class exposes three methods that you can use to control access to channels:
</para>
<informalexample>
<programlisting language="java"><![CDATA[
public boolean canCreate   (BayeuxServer server, ServerSession session, String channelId,      ServerMessage message);
public boolean canSubscribe(BayeuxServer server, ServerSession session, ServerChannel channel, ServerMessage message);
public boolean canPublish  (BayeuxServer server, ServerSession session, ServerChannel channel, ServerMessage message);
]]></programlisting>
</informalexample>
<para>
   These authorizers control, respectively, the operation to create a channel, the operation to subscribe to a channel,
    and the operation to publish to a channel.
</para>
<para>
    The complete algorithm for the authorization follows:
</para>
<orderedlist>
<listitem>
<para>If there is a security policy, and the security policy denies the request, then the request is denied.</para>
</listitem>
<listitem>
<para>Otherwise, if the authorizer set is empty, the request is granted.</para>
</listitem>
<listitem>
<para>Otherwise, if no authorizer explicitly grants the operation, the request is denied.</para>
</listitem>
<listitem>
<para>
    Otherwise, if at least one authorizer explicitly grants the operation, and no authorizer explicitly denies
    the operation, the request is granted.
</para>
</listitem>
<listitem>
<para>
    Otherwise, if one authorizer explicitly denies the operation, remaining authorizers are not consulted,
    and the request is denied.
</para>
</listitem>
</orderedlist>
<para>
The order in which the authorizers are called is not important.
</para>
<para>
    The following method of <classname>org.cometd.bayeux.server.Authorizer</classname> must be implemented
    with your authorization algorithm:
</para>
<informalexample>
<programlisting language="java"><![CDATA[
public Result authorize(Operation operation, ChannelId channel, ServerSession session, ServerMessage message);
]]></programlisting>
</informalexample>
<para>
One of three possible results must be returned:
</para>
<orderedlist>
<listitem>
<para>
<informalexample>
<programlisting language="java"><![CDATA[
public Result authorize(Operation operation, ChannelId channel, ServerSession session, ServerMessage message);
{
    return Result.grant();
}
]]></programlisting>
</informalexample>
</para>
<para>
    <code>Result.grant()</code> explicitly grants permission to perform the operation passed in as a parameter
    on the channel. At least one authorizer must grant the operation, otherwise the operation is denied.
</para>
<para>
    The fact that one (or multiple) authorizers grant an operation does not imply that the operation is granted
    at the end of the authorization algorithm: it could be denied by another authorizer in the set of authorizers
    for that channel.
</para>
</listitem>
<listitem>
<para>
<informalexample>
<programlisting language="java"><![CDATA[
public Result authorize(Operation operation, ChannelId channel, ServerSession session, ServerMessage message);
{
    return Result.ignore();
}
]]></programlisting>
</informalexample>
</para>
<para>
    <code>Result.ignore()</code> neither grants nor denies the permission to perform the operation passed in as a
    parameter on the channel.
    Ignoring the authorization request is the usual way to deny authorization if the conditions for which
    the operation must be granted do not apply.
</para>
</listitem>
<listitem>
<para>
<informalexample>
<programlisting language="java"><![CDATA[
public Result authorize(Operation operation, ChannelId channel, ServerSession session, ServerMessage message);
{
    return Result.deny("reason to deny");
}
]]></programlisting>
</informalexample>
</para>
<para>
    <code>Result.deny()</code> explicitly denies the permission to perform the operation passed in as a parameter
    on the channel.
    Denying the authorization request immediately results in the authorization being denied without even consulting
    other authorizers in the authorizer set for that channel.
</para>
<para>
    Typically, denying authorizers are used for cross-cutting concerns: where you have a sophisticated logic
    in authorizers to grant access to users for specific paid TV channels based on the user's contract
    (imagine that bronze, silver and gold contracts give access to different TV channels), you have a single
    authorizer that denies the operation if the user's balance is insufficient, no matter the contract or the
    TV channel being requested.
</para>
</listitem>
</orderedlist>
</section>

<section>
<info>
    <title>Example</title>
</info>
<para>
    The following example assumes that the security policy does not interfere with the authorizers, and that the
    code is executed before the channel exists (either at application startup or in places where the application
    logic ensures that the channel has not been created yet).
</para>
<para>
    Imagine an application that allows you to watch and play games.
</para>
<para>
    Typically, an ignoring authorizer is added on a root channel:
</para>
<para>
<informalexample>
<programlisting language="java"><![CDATA[
BayeuxServer bayeuxServer = ...;
bayeuxServer.createIfAbsent("/game/**");
ServerChannel gameStarStar = bayeuxServer.getChannel("/game/**");
gameStarStar.addAuthorizer(GrantAuthorizer.GRANT_NONE);
]]></programlisting>
</informalexample>
</para>
<para>
    This ensures that the authorizer set is not empty, and that by default (if no other authorizer grants or denies)
    the authorization is ignored and hence denied.
</para>
<para>
    Only captains can start a new game, and to do so they create a new channel for that game, for example
    <code>/game/123</code> (where <code>123</code> is the gameId):
</para>
<para>
<informalexample>
<programlisting language="java"><![CDATA[
gameStarStar.addAuthorizer(new Authorizer()
{
    public Result authorize(Operation operation, ChannelId channel, ServerSession session, ServerMessage message)
    {
        boolean isCaptain = isCaptain(session);
        boolean isGameChannel = !channel.isWild() && new ChannelId("/game").isParentOf(channel);
        if (operation == Operation.CREATE && isCaptain && isGameChannel)
            return Result.grant();
        return Result.ignore();
    }
});
]]></programlisting>
</informalexample>
</para>
<para>
    Everyone can watch the game:
</para>
<para>
<informalexample>
<programlisting language="java"><![CDATA[
gameStarStar.addAuthorizer(GrantAuthorizer.GRANT_SUBSCRIBE);
]]></programlisting>
</informalexample>
</para>
<para>
    Only players can play:
</para>
<para>
<informalexample>
<programlisting language="java"><![CDATA[
ServerChannel gameChannel = bayeuxServer.getChannel("/game/" + gameId);
gameChannel.addAuthorizer(new Authorizer()
{
    public Result authorize(Operation operation, ChannelId channel, ServerSession session, ServerMessage message)
    {
        boolean isPlayer = isPlayer(session, channel);
        if (operation == Operation.PUBLISH && isPlayer)
            return Result.grant();
        return Result.ignore();
    }
});
]]></programlisting>
</informalexample>
</para>
<para>
    The authorizers are the following:
</para>
<para>
<informalexample>
<screen>
/game/**  --> one authorizer that ignores everything
          --> one authorizer that grants captains authority to create games
          --> one authorizer that grants everyone the ability to watch games
/game/123 --> one authorizer that grants players the ability to play
</screen>
</informalexample>
</para>
<para>
    Imagine that later you want to forbid criminal supporters to watch games, so you can add another authorizer
    (instead of modifying the one that allows everyone to watch games):
</para>
<para>
<informalexample>
<programlisting language="java"><![CDATA[
gameStarStar.addAuthorizer(new Authorizer()
{
    public Result authorize(Operation operation, ChannelId channel, ServerSession session, ServerMessage message)
    {
        boolean isCriminalSupporter = isCriminalSupporter(session);
        if (operation == Operation.SUBSCRIBE && isCriminalSupporter)
            return Result.deny("criminal_supporter");
        return Result.ignore();
    }
});
]]></programlisting>
</informalexample>
</para>
<para>
    The authorizers are now the following:
</para>
<para>
<informalexample>
<screen>
/game/**  --> one authorizer that ignores everything
          --> one authorizer that grants captains the ability to create games
          --> one authorizer that grants everyone the ability to watch games
          --> one authorizer that denies criminal supporters the ability to watch games
/game/123 --> one authorizer that grants players the ability to play
</screen>
</informalexample>
</para>
<para>
    Notice how authorizers on <code>/game/**</code> never grant <code>Operation.PUBLISH</code>,
    which authorizers only grant on specific game channels.
    Also, the specific game channel does not need to grant <code>Operation.SUBSCRIBE</code>,
    because its authorizer ignores the subscribe operation that is authorizers therefore handle
    on the <code>/game/**</code> channel.
</para>
</section>
</section>
