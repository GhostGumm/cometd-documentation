<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd
                             http://www.w3.org/1999/xlink http://docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:id="java_client_transports">
<info>
<title>Client Transports</title>
</info>
<para>
    You can configure <classname>org.cometd.client.BayeuxClient</classname> class to use
    multiple transports. It currently supports the <code>long-polling</code>
    transport (that in turn depends on <link xl:href="http://eclipse.org/jetty">Jetty's</link>
    asynchronous <link xl:href="http://wiki.eclipse.org/Jetty/Tutorial/HttpClient">HttpClient</link>)
    and the <code>websocket</code> transport (that in turn depends on
    <link xl:href="http://eclipse.org/jetty">Jetty</link>'s asynchronous WebSocket client.
</para>
<para>
    You should configure <code>BayeuxClient</code> with the <code>websocket</code> transport
    before the <code>long-polling</code> transport, so that <code>BayeuxClient</code> can fall back
    to the <code>long-polling</code> if the <code>websocket</code> transport fails.
    You do so by listing the WebSocket transport before the HTTP transport on the <code>BayeuxClient</code> constructor,
    for example:
</para>
<informalexample>
<programlisting language="java"><![CDATA[
// Prepare the WebSocket transport
WebSocketClientFactory wsFactory = new WebSocketClientFactory();
wsFactory.start();
ClientTransport wsTransport = new WebSocketTransport(null, wsFactory, null);

// Prepare the HTTP transport
HttpClient httpClient = new HttpClient();
httpClient.start();
ClientTransport  httpTransport = new LongPollingTransport(null, httpClient);

// Configure the BayeuxClient, with the websocket transport listed before the http transport
BayeuxClient client = new BayeuxClient("http://localhost:8080/cometd", wsTransport, httpTransport);

// Handshake
client.handshake();
]]></programlisting>
</informalexample>

<section>
<info>
<title>Client Transports Configuration</title>
</info>
<para>
    The transports used by <code>BayeuxClient</code> can be configured with a number of parameters.
    Below you can find the parameters that are common to all transports, and those specific for each transport.
</para>

<table>
<caption>Client Transports Common Parameters</caption>
<thead>
<tr>
    <th>Parameter Name</th>
    <th>Required</th>
    <th>Default Value</th>
    <th>Parameter Description</th>
</tr>
</thead>
<tbody>
<tr>
    <td>jsonContext</td>
    <td>no</td>
    <td>org.cometd.common.JettyJSONContextClient</td>
    <td>The <code>JSONContext.Client</code> class name (see <xref linkend="java_json" />)</td>
</tr>
</tbody>
</table>
<?linebreak?>

<table>
<caption>Long Polling Client Transport Parameters</caption>
<thead>
<tr>
    <th>Parameter Name</th>
    <th>Required</th>
    <th>Default Value</th>
    <th>Parameter Description</th>
</tr>
</thead>
<tbody>
<tr>
    <td>maxNetworkDelay</td>
    <td>no</td>
    <td><code>HttpClient</code>'s <code>timeout</code></td>
    <td>The maximum number of milliseconds to wait before considering a request to the Bayeux server failed.</td>
</tr>
</tbody>
</table>
<?linebreak?>

<table>
<caption>WebSocket Client Transport Parameters</caption>
<thead>
<tr>
    <th>Parameter Name</th>
    <th>Required</th>
    <th>Default Value</th>
    <th>Parameter Description</th>
</tr>
</thead>
<tbody>
<tr>
    <td>maxNetworkDelay</td>
    <td>no</td>
    <td>15000</td>
    <td>The maximum number of milliseconds to wait before considering a request to the Bayeux server failed.</td>
</tr>
<tr>
    <td>connectTimeout</td>
    <td>no</td>
    <td>30000</td>
    <td>The maximum number of milliseconds to wait for a WebSocket connection to be opened.</td>
</tr>
<tr>
    <td>idleTimeout</td>
    <td>no</td>
    <td>60000</td>
    <td>The maximum number of milliseconds a WebSocket connection is kept idle before being closed.</td>
</tr>
<tr>
    <td>maxMessageSize</td>
    <td>no</td>
    <td>8192</td>
    <td>The maximum number of bytes allowed for each WebSocket message.</td>
</tr>
</tbody>
</table>

</section>

<section>
<info>
<title>Long-polling Transport Dependencies</title>
</info>
<para>
    If you are building your application with <link xl:href="http://maven.apache.org">Maven</link> (the
    recommended way), your application just needs to declare dependencies for:
</para>
<itemizedlist>
<listitem>
<para>
    <code>org.cometd.java:cometd-java-client</code> (Maven automatically pulls the Jetty dependencies
    that the <code>cometd-java-client</code> artifact needs).
</para>
</listitem>
<listitem>
<para>
    an <link xl:href="http://slf4j.org">SLF4J</link>
    (the logging library) implementation such as <code>org.slf4j:slf4j-simple</code> (we recommend
    that you use <code>org.slf4j:slf4j-log4j12</code> or <code>ch.qos.logback:logback-classic</code>).
</para>
</listitem>
</itemizedlist>
<para>
    With these dependencies in place, you can use the <code>long-polling</code> transport out of the box.
</para>
</section>

<section>
<info>
    <title>WebSocket Transport Dependencies></title>
</info>
<para>
    To use the <code>websocket</code> transport, you declare the dependencies listed above for the
    <code>long-polling</code> transport, <emphasis>and</emphasis> you also need to declare dependencies for
    <code>org.cometd.java:cometd-websocket-jetty</code> (Maven automatically pulls the Jetty dependencies that
    the <code>cometd-websocket-jetty</code> artifact needs).
</para>
</section>
</section>
