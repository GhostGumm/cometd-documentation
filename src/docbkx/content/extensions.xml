<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xml:id="extensions">
<info>
    <title>CometD 2 API: Extensions</title>
</info>
<para>
The CometD implementation has the capability to add/remove <emphasis>extensions</emphasis>.
An extension is a function that CometD calls; it allows you to modify a message just before sending it (an <emphasis>outgoing</emphasis> extension) or just after receiving it (an <emphasis>incoming</emphasis> extension).
</para>
<para>
An extension normally adds fields to the message being sent or received in the <link xl:href="http://svn.cometd.org/trunk/bayeux/bayeux.html#toc_45"><code>ext</code> object</link>) that the Bayeux specification defines.
An extension is not a way to add business fields to a message, but rather a way to process all messages, including the meta messages the Bayeux protocol uses, and to extend the Bayeux protocol itself.
</para>
<para>
Normally you set up extensions on both the client and the server, since fields the client adds usually need a special processing by the server; it is possible that an extension is only client-side or only server-side, but
most of the time both client and server need them. When an extension does not behave as expected, it's often because the extension is missing on one of the two sides.
</para>
<para>
The next sections describe the JavaScript CometD Extensions; they follow the same pattern the portable JavaScript CometD implementation uses: a portable implementation of the extension with <emphasis>bindings</emphasis> for the specific JavaScript toolkit, currently Dojo and jQuery.
</para>
<section>
<info>
    <title>Writing the Extension</title>
</info>
<para>
An extension is a JavaScript object with four optional methods:
</para>
<itemizedlist>
<listitem>
<para><code>outgoing(message)</code>–called just before a message is sent</para>
</listitem>
<listitem>
<para><code>incoming(message)</code>–called just after a message is received</para>
</listitem>
<listitem>
<para><code>registered(name, cometd)</code>–called when the extension is registered</para>
</listitem>
<listitem>
<para><code>unregistered()</code>–called when the extension is unregistered</para>
</listitem>
</itemizedlist>
<para>
These methods are optional; you can use only one, or maybe two, three, or all of them. If they are present, CometD involkes them at the proper time.
</para>
<para>
Writing an extension that logs and counts the long polls is quite easy: you need a reference to the <code>cometd</code> object that has the logging methods, and you need only the outgoing extension method:
</para>
<informalexample>
<programlisting language="javascript"><![CDATA[
var LoggerExt = function()
{
    var _cometd;
    var _counter;

    this.registered = function(name, cometd)
    {
        // Store the cometd object reference
        _cometd = cometd;
    };

    this.outgoing(message)
    {
        if (message.channel == '/meta/connect')
        {
            // Log the long poll
            _cometd._info('bayeux connect');

            // Count the long polls
            if (!message.ext) message.ext = {};
            if (!message.ext.logger) message.ext.logger = {};
            if (!message.ext.logger.counter) message.ext.logger.counter = 0;
            message.ext.logger.counter = ++_counter;
        }
    };
};
]]>
</programlisting>
</informalexample>
<para>
Notice that meta messages are also passed to the extension methods; you normally have to filter the messages that the extension method receives by looking at the channel or at some other message value.
</para>
<para>
Notice also that you can modify the message by adding fields, normally in the <code>ext</code> field.
</para>
<note>
<para>Be careful not to overwrite the <code>ext</code> field, which other extensions might have set: check whether it's present first.
It is also a good practice to group extension fields so that there is no clash with other extensions (in the example above, the only field – counter – is <emphasis>grouped</emphasis> in the <code>message.ext.logger</code> object).</para>
</note>
<para>
The <code>outgoing()</code> and <code>incoming()</code> methods can avoid  returning something, or returning the message itself (or another message object). This means that the extension has processed the message and therefore other extensions, if present, can process it, or the implementation can process the message (either by sending it to the server – for outgoing extensions – or by notifying listeners – for incoming extensions).
</para>
<para>
If the extension method returns <code>null</code>, the processing should stop: other exensions do not process the message, and CometD does not further process it. CometD does not send the message to the server, nor notify listeners.
</para>
</section>
<section>
<info>
    <title>Registering the Extension</title>
</info>
<para>
The JavaScript CometD API defines three methods to manage extensions:
</para>
<itemizedlist>
<listitem>
<para><code>registerExtension(name, extension)</code>–to register an extension with the given name</para>
</listitem>
<listitem>
<para><code>unregisterExtension(name)</code>–to unregister the extension previously registered with the given name</para>
</listitem>
<listitem>
<para><code>getExtension(name)</code>–to obtain a reference to the extension previously registered with the given name</para>
</listitem>
</itemizedlist>
<para>
Following the example above, you can register the extension like this:
</para>
<informalexample>
<programlisting language="javascript"><![CDATA[
cometd.registerExtension('loggerExt', new LoggerExt());
]]>
</programlisting>
</informalexample>
<para>
From now on, the meta connect messages are modified to carry the counter from the example extension above.
</para>
<para>
Unregistering the extension is similar:
</para>
<informalexample>
<programlisting language="javascript"><![CDATA[
cometd.unregisterExtension('loggerExt');
]]>
</programlisting>
</informalexample>
<para>
It is not possible to register two extensions under the same name.
</para>
<para>
You can register more than one extension, and CometD supplies them in  registration order: outgoing extensions methods are called in registration order and, by default, incoming registration methods are called in reverse registration order. See also the <code>reverseIncomingExtensions</code> configuration parameter in <xref linkend="javascript_configure" />.
For example, if you register <code>extA</code> and <code>extB</code>, for outgoing messages the methods called are: <code>extA.outgoing()</code> and then <code>extB.outgoing()</code>, while for incoming messages the methods called are <code>extB.incoming()</code> and then <code>extA.incoming()</code>.
</para>
</section>
<section>
<info>
    <title>Extension Exception Handling</title>
</info>
<para>
While it is normally good practice to catch exceptions within extension functions, sometimes this is tedious to code, or there is no control about the quality of the extension (for example, it's a third party extension).
The JavaScript CometD API provides a way to define the global extension exception handler that is invoked every time an extension throws an exception (for example, calling a method on an undefined object):
</para>
<informalexample>
<programlisting language="javascript"><![CDATA[
cometd.onExtensionException = function(exception, extensionName, outgoing, message)
{
    // Uh-oh, something went wrong, disable this extension
    // Object "this" points to the CometD object
    this.unregisterExtension(extensionName);

    // If the message is going to the server, add the error to the message
    if (outgoing)
    {
        // Assume we have created the message structure below
        var badExtension = message.ext.badExtensions[extensionName];
        badExtension.exception = exception;
    }
}
]]>
</programlisting>
</informalexample>
<para>
Be <emphasis>very</emphasis> careful to use the CometD object to publish messages within the extension exception handler, or you might end up in an infinite loop (the extensions process the publish message, which might fail and call again the extension exception handler).
If the extension exception handler itself throws an exception, this exception is logged at level "info" and the CometD implementation does not break.
</para>
<para>
To learn about a similar mechanism exists for listeners and subscribers, see <xref linkend="javascript_configure" />.
</para>
<para>
The next sections explain in detail the use of the extensions CometD provides.
</para>
</section>

<xi:include href="extensions_acknowledge.xml" />
<xi:include href="extensions_reload.xml" />
<xi:include href="extensions_timestamp.xml" />
<xi:include href="extensions_timesync.xml" />

</chapter>
