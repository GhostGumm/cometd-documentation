<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xml:id="javascript_configure">
<info>
    <title>JavaScript CometD 2 API: Configuring and Initializing</title>
</info>
<para>
    After you set up your skeleton project following the <xref linkend="primer" />, you probably want to fully
    understand how to customize and configure the parameters that govern the behavior of the Cometd implementation.
</para>
<para>
    The complete API is available through a single object prototype named <code>org.cometd.Cometd</code>.
    The Dojo toolkit has one instance of this object available under the name <code>dojox.cometd</code>, while for
    jQuery it is available under the name <code>$.cometd</code>.
    This default <code>cometd</code> object has been instantiated and configured with the default values and it has
    not started any Bayeux communication yet.
    Before it can start Bayeux communication it needs a mandatory parameter: the URL of the Bayeux server.
</para>
<para>
    There are two ways of passing this parameter:
</para>
<informalexample>
<programlisting language="javascript"><![CDATA[
// First style: URL string
cometd.configure('http://localhost:8080/cometd');

// Second style: configuration object
cometd.configure({
    url: 'http://localhost:8080/cometd'
});
]]>
</programlisting>
</informalexample>
<para>
The first way is a shorthand for the second way.
However, the second way allows you to pass other configuration parameters, currently:
</para>
<informaltable>
<thead>
<tr>
  <th>Parameter Name</th>
  <th>Required</th>
  <th>Default Value</th>
  <th>Parameter Description</th>
</tr>
</thead>
<tbody>
<tr>
  <td>url</td>
  <td>yes</td>
  <td></td>
  <td>The URL of the Bayeux server this client will connect to.</td>
</tr>
<tr>
  <td>logLevel</td>
  <td>no</td>
  <td>info</td>
  <td>The log level. Possible values are: "warn", "info", "debug". Output to window.console if available.</td>
</tr>
<tr>
  <td>maxConnections</td>
  <td>no</td>
  <td>2</td>
  <td>The maximum number of connections used to connect to the Bayeux server. Change this value only if you know exactly the client's connection limit and what "request queued behind long poll" means.</td>
</tr>
<tr>
  <td>backoffIncrement</td>
  <td>no</td>
  <td>1000</td>
  <td>The number of milliseconds that the backoff time increments every time a connection with the Bayeux server fails. CometD attempts to reconnect after the backoff time elapses.</td>
</tr>
<tr>
  <td>maxBackoff</td>
  <td>no</td>
  <td>60000</td>
  <td>The maximum number of milliseconds of the backoff time after which the backoff time is not incremented further.</td>
</tr>
<tr>
  <td>reverseIncomingExtensions</td>
  <td>no</td>
  <td>true</td>
  <td>Controls whether the incoming extensions are called in reverse order with respect to the registration order.</td>
</tr>
<tr>
  <td>maxNetworkDelay</td>
  <td>no</td>
  <td>10000</td>
  <td>The maximum number of milliseconds to wait before considering a request to the Bayeux server failed.</td>
</tr>
<tr>
  <td>requestHeaders</td>
  <td>no</td>
  <td>{}</td>
  <td>An object containing the request headers to be sent for every Bayeux request (for example, <code>{"My-Custom-Header":"MyValue"}</code>).</td>
</tr>
<tr>
  <td>appendMessageTypeToURL</td>
  <td>no</td>
  <td>true</td>
  <td>Determines whether or not the Bayeux message type (handshake, connect, disconnect) is appended to the URL of the Bayeux server (see above).</td>
</tr>
<tr>
  <td>autoBatch</td>
  <td>no</td>
  <td>false</td>
  <td>Determines whether multiple publishes that get queued up are sent as a batch on the first occasion, without requiring explicit batching.</td>
</tr>
</tbody>
</informaltable>

<para>
    After you have configured the <code>cometd</code> object, the Bayeux communication does not start until you call
    <code>handshake()</code>, see the <xref linkend="javascript_handshake" />.
</para>
<para>
    Previous users of the JavaScript CometD implementation called a method named <code>init()</code>.
    This method still exists, and it is a shorthand for calling <code>configure()</code> followed by
    <code>handshake()</code>.
    Follow the advice in the <xref linkend="javascript_handshake" /> as it applies as well to <code>init()</code>.
</para>
</section>
