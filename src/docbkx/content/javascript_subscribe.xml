<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xml:id="javascript_subscribe">
<info>
   <title>Subscribing and Unsubscribing</title>
</info>
<para>
    The following sections provide information about subscribing and unsubscribing with the JavaScript library.
</para>
<para>
    Depending on the type of channel, subscribing and unsubscribing to a channel have different meaning.
    Refer to <xref linkend="concepts_channels" /> for the channel type definitions.
</para>

<section>
<info>
    <title>Meta Channels</title>
</info>
<para>
    It is not possible to subscribe to meta channels: the server replies with an error message. It is possible to
    listen to meta channels (see <xref linkend="javascript_subscribe_vs_listen" /> for an explanation of the
    difference between subscribers and listeners).
    You cannot (and it makes no sense to) publish messages to meta channels: only the Bayeux protocol
    implementation creates and sends messages on meta channels.
    Meta channels are useful on the client to listen for error messages like handshake errors (for example, because
    the client did not provide the correct credentials) or network errors (for example, to know when the connection
    with the server has broken or when it has been re-established).
</para>
</section>

<section>
<info>
    <title>Service Channels</title>
</info>
<para>
    Service channels are used in the case of request/response style of communication between client and server (as
    opposed to the publish/subscribe style of communication on broadcast channels).
    While subscribing to service channels yields no errors, this is a no-operation for the server: the server ignores
    the subscription request.
    It is possible to publish to service channels, with the semantic of a communication between a specific client
    (the one that is publishing the message on the service channel) and the server.
    Service channels are useful to implement, for example, private chat messages: in a chat with userA, userB and
    userC, userA can publish a private message to userC (without userB knowing about it) using service channels.
</para>
</section>

<section>
<info>
    <title>Broadcast Channels</title>
</info>
<para>
    Broadcast channels have the semantic of a messaging topic and are used in the case of publish/subscribe style of
    communication.
    Usually, it is possible to subscribe to broadcast channels and to publish to broadcast channels; this can only be
    forbidden using a security policy on the Bayeux server (see <xref linkend="java_server_authorization" />)
    or by using authorizers (see <xref linkend="java_server_authorizers" />).
    Broadcast channels are useful to broadcast messages to all subscribed clients, for example in case
    of a stock price change.
</para>
</section>

<section  xml:id="javascript_subscribe_vs_listen">
<info>
    <title>Subscribers versus Listeners</title>
</info>
<para>
    The JavaScript CometD API has two APIs to work with channel subscriptions:
</para>
<orderedlist>
    <listitem>
        <para>
            <code>addListener()</code> and the correspondent <code>removeListener()</code>
        </para>
    </listitem>
    <listitem>
        <para>
            <code>subscribe()</code> and the correspondent <code>unsubscribe()</code>
        </para>
    </listitem>
</orderedlist>
<para>
    The <code>addListener()</code> method:
</para>
<itemizedlist>
<listitem>
    <para>Must be used to listen to meta channel messages.</para>
</listitem>
<listitem>
<para>
    May be used to listen to service channel messages (you may also use<code>subscribe()</code>,
    but we do not recommend it).
</para>
</listitem>
<listitem>
    <para>Should not be used to listen broadcast channel messages (use <code>subscribe()</code> instead). </para>
</listitem>
<listitem>
<para>
    Does not involve any communication with the Bayeux server, and as such can be called before calling
    <code>handshake().</code>
</para>
</listitem>
<listitem>
    <para>Is synchronous: when it returns, you are guaranteed that the listener has been added.</para>
</listitem>
</itemizedlist>
<para>
    The <code>subscribe()</code> method:
</para>
<itemizedlist>
    <listitem>
        <para>Must not be used to listen to meta channels messages (otherwise the server returns an error).</para>
    </listitem>
    <listitem>
        <para>May be used to listen to service channel messages (you may also use<code>addListener()</code>, which is
            preferred).
        </para>
    </listitem>
    <listitem>
        <para>Should be used to listen to broadcast channel messages.</para>
    </listitem>
    <listitem>
        <para>Involves a communication with the Bayeux server and as such cannot be called before calling
            <code>handshake().</code>
        </para>
    </listitem>
    <listitem>
        <para>Is asynchronous: it returns immediately, well before the Bayeux server has received the subscription
            request.
        </para>
    </listitem>
</itemizedlist>
<note>
<para>
    Calling <code>subscribe()</code> <emphasis role="bold"> does not</emphasis> mean that you have completed the
    subscription with the server when <code>subscribe()</code> returns.
</para>
</note>
<para>
    Both <code>addListener()</code> and <code>subscribe()</code> return a subscription object that must be passed to,
    respectively, <code>removeListener()</code> and <code>unsubscribe()</code>:
</para>
<informalexample>
<programlisting language="javascript"><![CDATA[
// Some initialization code
var subscription1 = cometd.addListener('/meta/connect', function() { ... });
var subscription2 = cometd.subscribe('/foo/bar/', function() { ... });

// Some de-initialization code
cometd.unsubscribe(subscription2);
cometd.removeListener(subscription1);
]]></programlisting>
</informalexample>
<para>
    A good place in the code where subscriptions should be performed is in a <code>/meta/handshake</code> listener.
    Since <code>/meta/handshake</code> listener are invoked in both explicit handshake performed by the client
    and in re-handshakes triggered by the server, it is guaranteed that your subscriptions will always be
    performed properly.
</para>
<para>
    Applications do not need to unsubscribe in case of re-handshake; the CometD library takes care of removing
    all subscriptions upon re-handshake, so that when the <code>/meta/handshake</code> listener executes again
    the subscriptions will be correctly restored (and not duplicated).
</para>
<para>
    How do <code>subscribe()</code> and <code>unsubscribe()</code> behave in case the Bayeux server is not reachable
    (due to network failures or because the server crashed)?
    In <code>subscribe()</code> CometD first adds the local listener to the list of subscribers for that channel, then
    attempts the server communication. If the communication fails, the server does not know that it has to send
    messages to this client and therefore on the client, the local listener (although present) is never invoked.
    In <code>unsubscribe()</code>, CometD first removes the local listener from the list of subscribers for that channel,
    then attempts the server communication. If the communication fails, the server still sends the message to the
    client,  but there is no local listener to dispatch to.
</para>
</section>
<section xml:id="exception_handling">
<info>
    <title>Listeners and Subscribers Exception Handling</title>
</info>
<para>
    If a listener or subscriber function throws an exception (for example, calls a method on an undefined object),
    then the error message is logged (at level "debug").
    However, there is a way to intercept these errors by defining the global listener exception handler that is
    invoked every time a listener or subscriber throws an exception:
</para>
<informalexample>
<programlisting language="javascript"><![CDATA[
cometd.onListenerException = function(exception, subscriptionHandle, isListener, message)
{
    // Uh-oh, something went wrong, disable this listener/subscriber
    // Object "this" points to the CometD object
    if (isListener)
        this.removeListener(subscriptionHandle);
    else
        this.unsubscribe(subscriptionHandle);
}
]]></programlisting>
</informalexample>
<para>
    It is possible to send messages to the server from the listener exception handler.
    If the listener exception handler itself throws an exception, this exception is logged at level "info" and the
    CometD implementation will not break.
    Notice that a similar mechanism exists for extensions, see <xref linkend="extensions" />.
</para>
</section>
<section>
<info>
    <title>Wildcard Subscriptions</title>
</info>
<para>
    It is possible to subscribe to several channels simultaneously using wildcards:
</para>
<informalexample>
<programlisting language="javascript"><![CDATA[
cometd.subscribe("/chatrooms/*", function(message) { ... });
]]></programlisting>
</informalexample>
<para>
    A single asterisk has the meaning of matching a single channel segment; in the example above it matches channels
    <code>/chatrooms/12</code> and <code>/chatrooms/15</code>, but not <code>/chatrooms/12/upload</code>.
    To match multiple channel segments, use the double asterisk:
</para>
<informalexample>
<programlisting language="javascript"><![CDATA[
cometd.subscribe("/events/**", function(message) { ... });
]]></programlisting>
</informalexample>
<para>
    With the double asterisk, the channels <code>/events/stock/FOO</code> and <code>/events/forex/EUR</code> match,
    as well as <code>/events/feed</code> and <code>/events/feed/2009/08/03</code>.
</para>
<para>
    The wildcard mechanism works also for listeners, so it is possible to listen to all meta channels as follows:
</para>
<informalexample>
<programlisting language="javascript"><![CDATA[
cometd.addListener("/meta/*", function(message) { ... });
]]></programlisting>
</informalexample>
<para>
    By default, subscriptions to the global wildcards <code>/*</code> and <code>/**</code> result in an error, but
    you can change this behavior by specifying a custom security policy on the Bayeux server.
</para>
</section>
<section>
<info>
    <title>Meta Channel List</title>
</info>
<para>
    These are the meta channels available in the JavaScript CometD implementation:
</para>
<itemizedlist>
    <listitem>
        <para>/meta/handshake</para>
    </listitem>
    <listitem>
        <para>/meta/connect</para>
    </listitem>
    <listitem>
        <para>/meta/disconnect</para>
    </listitem>
    <listitem>
        <para>/meta/subscribe</para>
    </listitem>
    <listitem>
        <para>/meta/unsubscribe</para>
    </listitem>
    <listitem>
        <para>/meta/publish</para>
    </listitem>
    <listitem>
        <para>/meta/unsuccessful</para>
    </listitem>
</itemizedlist>
<para>
    Each meta channel is notified when the JavaScript CometD implementation handles the correspondent Bayeux message.
    The <code>/meta/unsuccessful</code> channel is notified in case of any failure.
</para>
<para>
    By far the most interesting meta channel to subscribe to is <code>/meta/connect</code>, because it gives the
    status of the current connection with the Bayeux server. In combination with <code>/meta/disconnect</code>,
    you can use it, for example, to display a green <emphasis>connected</emphasis> icon or a red <emphasis>disconnected</emphasis> icon on the page,
    depending on the connection status with the Bayeux server.
</para>
<para>
    Here is a common pattern using the <code>/meta/connect</code> and <code>/meta/disconnect</code> channels:
</para>
<informalexample>
<programlisting language="javascript"><![CDATA[
var _connected = false;

cometd.addListener('/meta/connect', function(message)
{
    if (cometd.isDisconnected())
    {
        return;
    }

    var wasConnected = _connected;
    _connected = message.successful;
    if (!wasConnected && _connected)
    {
        // Reconnected
    }
    else if (wasConnected && !_connected)
    {
        // Disconnected
    }
});

cometd.addListener('/meta/disconnect', function(message)
{
    if (message.successful)
    {
        _connected = false;
    }
}
]]></programlisting>
</informalexample>
<para>
    One small caveat with the <code>/meta/connect</code> channel is that <code>/meta/connect</code> is also used
    for polling the server.
    Therefore, if a disconnect is issued during an active poll, the server returns the active poll and this
    triggers the <code>/meta/connect</code> listener.
    The initial check on the status verifies that is not the case before executing the connection logic.
</para>
<para>
    Another interesting use of meta channels is when there is an authentication step during the handshake.
    In this case the registration to the <code>/meta/handshake</code> channel can give details about, for example,
    authentication failures.
</para>
</section>
</section>
