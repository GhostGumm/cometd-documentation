<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xml:id="java_server_services_integration_spring">
<info>
    <title>CometD 2 Services Integration with Spring</title>
</info>
<para>
Integration of CometD services with <link xl:href="http://springframework.org">Spring</link> is particularly interesting, since most of the time your Bayeux services require other <emphasis>beans</emphasis> to perform their service.
Not all Bayeux services are as simple as the <link xl:href="/documentation/cometd-java/server/services">EchoService</link>, and having Spring's dependency injection (as well as other facilities) integrated greatly simplifies development.
</para>
<para>
The following instructions are valid from the 2.1.0 release onwards.
</para>
<section>
<info>
    <title>XML Based Spring Configuration</title>
</info>
<para>
The BayeuxServer object is directly configured and initialized in the Spring configuration file, which injects it in the servlet context, where the CometD servlet picks it up, performing no further configuration or initialization.
</para>
<para>
The <code>web.xml</code> file is as follows:
</para>
<informalexample>
<programlisting language="xml"><![CDATA[
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;web-app xmlns="http://java.sun.com/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
         version="2.5"&gt;

    &lt;servlet&gt;
        &lt;servlet-name&gt;cometd&lt;/servlet-name&gt;
        &lt;servlet-class&gt;org.cometd.server.CometdServlet&lt;/servlet-class&gt;
    &lt;/servlet&gt;
    &lt;servlet-mapping&gt;
        &lt;servlet-name&gt;cometd&lt;/servlet-name&gt;
        &lt;url-pattern&gt;/cometd/*&lt;/url-pattern&gt;
    &lt;/servlet-mapping&gt;

    &lt;listener&gt;
        &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;
    &lt;/listener&gt;

&lt;/web-app&gt;
]]>
</programlisting>
</informalexample>
<para>
Spring's <code>applicationContext.xml</code> is as follows:
</para>
<informalexample>
<programlisting language="xml"><![CDATA[
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd"&gt;

    &lt;bean id="otherService" class="com.acme..." /&gt;

    &lt;bean id="bayeux" class="org.cometd.server.BayeuxServerImpl" init-method="start" destroy-method="stop"&gt;
        &lt;property name="options"&gt;
            &lt;map&gt;
                &lt;entry key="logLevel" value="3" /&gt;
                &lt;entry key="timeout" value="15000" /&gt;
            &lt;/map&gt;
        &lt;/property&gt;  
    &lt;/bean&gt;

    &lt;bean id="echoService" class="com.acme.cometd.EchoService"&gt;
        &lt;constructor-arg&gt;&lt;ref local="bayeux" /&gt;&lt;/constructor-arg&gt;
        &lt;constructor-arg&gt;&lt;ref local="otherService" /&gt;&lt;/constructor-arg&gt;
    &lt;/bean&gt;

    &lt;bean class="org.springframework.web.context.support.ServletContextAttributeExporter"&gt;
        &lt;property name="attributes"&gt;
            &lt;map&gt;
                &lt;entry key="org.cometd.bayeux"&gt;
                    &lt;ref local="bayeux" /&gt;
                &lt;/entry&gt;
            &lt;/map&gt;
        &lt;/property&gt; 
    &lt;/bean&gt;
&lt;/beans&gt;
]]>
</programlisting>
</informalexample>
<para>
Spring now creates the BayeuxServer object, configuring it via the <code>options</code> property, initializing via the <code>start()</code> method, and exporting to the servlet context via Spring's <code>ServletContextAttributeExporter</code>.
</para>
<para>
Differently from <link xl:href="/documentation/cometd-java/server/services/integration-spring">CometD 1's Spring integration</link>, in CometD 2 the BayeuxServer object you create in this way is fully functional; therefore there is no need to mark dependent services as lazy, and no need for glue code.
</para>
</section>
<section>
<info>
    <title>Annotation Based Spring Configuration</title>
</info>
<para>
Spring 3.x supports annotation-based configuration, and <xref linkend="annotated_services" /> integrate nicely with Spring 3.x.
Spring 3.x is required over Spring 2.5.x because it supports injection via <link xl:href="http://jcp.org/en/jsr/detail?id=330">JSR 330</link>.
Prerequisite to making Spring 3.x work with CometD annotated services is to have JSR 330's <code>javax.inject</code> classes in the classpath along with JSR 250's <code>javax.annotation</code> classes (these are included in JDK 6 and therefore only required if you use JDK 5).
</para>
<note>
<para>Do not forget that Spring 3.x requires CGLIB classes in the classpath as well.</para>
</note>
<para>
The <code>web.xml</code> file is exactly equal to the one given as an example in the XML based configuration above.
</para>
<para>
Spring's <code>applicationContext.xml</code> is as follows:
</para>
<informalexample>
<programlisting language="xml"><![CDATA[
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd"&gt;

    &lt;context:component-scan base-package="com.acme..." /&gt;

&lt;/beans&gt;
]]>
</programlisting>
</informalexample>
<para>
Spring scans the classpath for classes that qualify as Spring beans in the given base package.
</para>
<para>
The CometD annotated service needs some additional annotation to make it qualify as a Spring bean:
</para>
<informalexample>
<programlisting language="java"><![CDATA[
<b>@javax.inject.Named</b> // Tells Spring that this is a bean
<b>@javax.inject.Singleton</b> // Tells Spring that this is a singleton
@Service("echoService")
public class EchoService
{
    @Inject
    private BayeuxServer bayeux;
    @Session
    private ServerSession serverSession;

    @PostConstruct
    public void init()
    {
        System.out.println("Echo Service Initialized");
    }

    @Listener("/echo")
    public void echo(ServerSession remote, ServerMessage.Mutable message)
    {
        String channel = message.getChannel();
        Object data = message.getData();
        remote.deliver(serverSession, channel, data, null);
    }
}
]]>
</programlisting>
</informalexample>
<para>
The missing piece is that you need to tell Spring to perform the processing of the CometD annotations; do so using a Spring component:
</para>
<informalexample>
<programlisting language="java"><![CDATA[
@Component
public class Configurer implements DestructionAwareBeanPostProcessor, ServletContextAware
{
    private BayeuxServer bayeuxServer;
    private ServerAnnotationProcessor processor;

    @Inject
    private void setBayeuxServer(BayeuxServer bayeuxServer)
    {
        this.bayeuxServer = bayeuxServer;
    }

    @PostConstruct
    private void init()
    {
        this.processor = new ServerAnnotationProcessor(bayeuxServer);
    }

    public Object postProcessBeforeInitialization(Object bean, String name) throws BeansException
    {
        processor.processDependencies(bean);
        processor.processConfigurations(bean);
        processor.processCallbacks(bean);
        return bean;
    }

    public Object postProcessAfterInitialization(Object bean, String name) throws BeansException
    {
        return bean;
    }

    public void postProcessBeforeDestruction(Object bean, String name) throws BeansException
    {
        processor.deprocessCallbacks(bean);
    }

    @Bean(initMethod = "start", destroyMethod = "stop")
    public BayeuxServer bayeuxServer()
    {
        BayeuxServerImpl bean = new BayeuxServerImpl();
        bean.setOption(BayeuxServerImpl.LOG_LEVEL, "3");
        return bean;
    }

    public void setServletContext(ServletContext servletContext)
    {
        servletContext.setAttribute(BayeuxServer.ATTRIBUTE, bayeuxServer);
    }
}
]]>
</programlisting>
</informalexample>
<para>
Summary:
</para>
<itemizedlist>
<listitem>
<para>This Spring component is the factory for the BayeuxServer object via the <code>bayeuxServer()</code> method (annotated with Spring's <code>@Bean</code>).</para>
</listitem>
<listitem>
<para>To create CometD's <code>ServerAnnotationProcessor</code>, it requires the BayeuxServer object, and therefore it <code>@Inject</code>s it into a setter method.</para>
</listitem>
<listitem>
<para>The lifecycle callback <code>init()</code> creates CometD's <code>ServerAnnotationProcessor</code>, which is then used during Spring's bean post processing phases.</para>
</listitem>
<listitem>
<para>Finally, the BayeuxServer object is exported into the servlet context for the CometD servlet to use.</para>
</listitem>
</itemizedlist>
</section>
</section>
