<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd
                             http://www.w3.org/1999/xlink http://docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:id="java_server_services_integration_spring">
<info>
    <title>Services Integration with Spring</title>
</info>
<para>
    Integration of CometD services with <link xl:href="http://springframework.org">Spring</link> is particularly
    interesting, since most of the time your Bayeux services require other <emphasis>beans</emphasis> to perform
    their service.
    Not all Bayeux services are as simple as the <code>EchoService</code>
    (see <xref linkend="java_server_services_inherited" />,
    and having Spring's dependency injection (as well as other facilities) integrated greatly simplifies development.
</para>

<section xml:id="java_server_services_integration_spring_xml_based_spring_configuration">
<info>
    <title>XML Based Spring Configuration</title>
</info>
<para>
    The <code>BayeuxServer</code> object is directly configured and initialized in the Spring configuration file,
    which injects it in the servlet context, where the CometD servlet picks it up, performing no further
    configuration or initialization.
</para>
<para>
    The <filename>web.xml</filename> file is as follows:
</para>
<informalexample>
<programlisting language="xml"><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://java.sun.com/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
         version="2.5">

    <servlet>
        <servlet-name>cometd</servlet-name>
        <servlet-class>org.cometd.server.CometdServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>cometd</servlet-name>
        <url-pattern>/cometd/*</url-pattern>
    </servlet-mapping>

    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

</web-app>
]]></programlisting>
</informalexample>
<important>
<para>
    It is important to note that the <filename>web.xml</filename> above does <emphasis>not</emphasis>
    contain any configuration specified as <code>&lt;init-param&gt;</code>.
    This is because if you are using Spring, you want the configuration to be specified in just one place,
    that is in the Spring configuration files.
</para>
<para>
    Furthermore, the <code>&lt;load-on-startup&gt;</code> directive is <emphasis>not</emphasis> present.
    Since the Servlet Specification does not define the startup order between servlets and listeners
    (in particular, <code>&lt;listener&gt;</code> elements cannot be ordered with a
    <code>&lt;load-on-startup&gt;</code> element), you must make sure that the Spring
    <code>&lt;listener&gt;</code> runs before the <code>CometdServlet</code>, otherwise
    you risk that two <code>BayeuxServer</code> objects are created (one by <code>CometdServlet</code> and
    the other by Spring), and your application will not work properly (likely, the connection with remote
    clients will be handled by the <code>CometdServlet</code>'s <code>BayeuxServer</code>, while your
    services will be bound to Spring's <code>BayeuxServer</code>).
</para>
<para>
    By not specifying a <code>&lt;load-on-startup&gt;</code> element in the <code>CometdServlet</code>
    definition, the <code>CometdServlet</code> will be initialized lazily <emphasis>after</emphasis> the
    Spring <code>&lt;listener&gt;</code>, ensuring that only the Spring's <code>BayeuxServer</code> is
    created and used also by <code>CometdServlet</code> when it is initialized upon receiving the first
    request from remote clients.
</para>
</important>
<para>
    Spring's <code>applicationContext.xml</code> is as follows:
</para>
<informalexample>
<programlisting language="xml"><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd">

    <bean id="otherService" class="com.acme..." />

    <bean id="bayeux" class="org.cometd.server.BayeuxServerImpl" init-method="start" destroy-method="stop">
        <property name="options">
            <map>
                <entry key="logLevel" value="3" />
                <entry key="timeout" value="15000" />
            </map>
        </property>
    </bean>

    <bean id="echoService" class="com.acme.cometd.EchoService">
        <constructor-arg><ref local="bayeux" /></constructor-arg>
        <constructor-arg><ref local="otherService" /></constructor-arg>
    </bean>

    <bean class="org.springframework.web.context.support.ServletContextAttributeExporter">
        <property name="attributes">
            <map>
                <entry key="org.cometd.bayeux">
                    <ref local="bayeux" />
                </entry>
            </map>
        </property>
    </bean>
</beans>
]]></programlisting>
</informalexample>
<para>
    Spring now creates the <code>BayeuxServer</code> object, configuring it via the <code>options</code> property,
    initializing via the <code>start()</code> method, and exporting to the servlet context via Spring's
    <code>ServletContextAttributeExporter</code>.
    This ensures that <code>CometdServlet</code> will <emphasis>not</emphasis> create its own instance of
    <code>BayeuxServer</code>, but use the one that is already present in the servlet context, created by Spring.
</para>
<para>
    Below you can find a Spring's <code>applicationContext.xml</code> that configures the <code>BayeuxServer</code>
    object with the WebSocket transport:
</para>
<informalexample>
<programlisting language="xml"><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd">

    <bean id="bayeux" class="org.cometd.server.BayeuxServerImpl" init-method="start" destroy-method="stop">
        <property name="transports">
            <list>
                <bean id="websocketTransport" class="org.cometd.websocket.server.WebSocketTransport">
                    <constructor-arg ref="bayeux" />
                </bean>
                <bean id="jsonTransport" class="org.cometd.server.transport.JSONTransport">
                    <constructor-arg ref="bayeux" />
                </bean>
                <bean id="jsonpTransport" class="org.cometd.server.transport.JSONPTransport">
                    <constructor-arg ref="bayeux" />
                </bean>
            </list>
        </property>
    </bean>

    ... as before ...

</beans>
]]></programlisting>
</informalexample>
<note>
<para>
    When configuring the <code>BayeuxServer</code> transports, you need to explicitly specify all the transports
    you want, included the default transports that you do not need to specify when configuring a
    <code>BayeuxServer</code> using the <code>CometdServlet</code>.
    The order of the transports is important, and you want the <code>WebSocketTransport</code> to be the first
    of the list, followed by at least the <code>JSONTransport</code> (also known as the "long-polling" transport)
    as a fallback.
</para>
</note>
</section>

<section>
<info>
    <title>Annotation Based Spring Configuration</title>
</info>
<para>
    Spring 3.x supports annotation-based configuration, and <xref linkend="java_server_services_annotated" />
    integrate nicely with Spring 3.x.
    Spring 3.x is required over Spring 2.5.x because it supports injection via
    <link xl:href="http://jcp.org/en/jsr/detail?id=330">JSR 330</link>.
    Prerequisite to making Spring 3.x work with CometD annotated services is to have JSR 330's
    <code>javax.inject</code> classes in the classpath along with
    <link xl:href="http://jcp.org/en/jsr/detail?id=250">JSR 250's</link> <code>javax.annotation</code> classes
    (these are included in JDK 6 and therefore only required if you use JDK 5).
</para>
<note>
<para>
    Do not forget that Spring 3.x requires CGLIB classes in the classpath as well.
</para>
</note>
<para>
    The <code>web.xml</code> file is exactly the same as the one given as an example in the XML based configuration
    above (see <xref linkend="java_server_services_integration_spring_xml_based_spring_configuration" />), and
    the same important notes apply.
</para>
<para>
    Spring's <code>applicationContext.xml</code> is as follows:
</para>
<informalexample>
<programlisting language="xml"><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">

    <context:component-scan base-package="com.acme..." />

</beans>
]]></programlisting>
</informalexample>
<para>
    Spring scans the classpath for classes that qualify as Spring beans in the given base package.
</para>
<para>
    The CometD annotated service needs some additional annotation to make it qualify as a Spring bean:
</para>
<informalexample>
<programlisting language="java"><![CDATA[
@javax.inject.Named // Tells Spring that this is a bean
@javax.inject.Singleton // Tells Spring that this is a singleton
@Service("echoService")
public class EchoService
{
    @Inject
    private BayeuxServer bayeux;
    @Session
    private ServerSession serverSession;

    @PostConstruct
    public void init()
    {
        System.out.println("Echo Service Initialized");
    }

    @Listener("/echo")
    public void echo(ServerSession remote, ServerMessage.Mutable message)
    {
        String channel = message.getChannel();
        Object data = message.getData();
        remote.deliver(serverSession, channel, data, null);
    }
}
]]></programlisting>
</informalexample>
<para>
    The missing piece is that you need to tell Spring to perform the processing of the CometD annotations;
    do so using a Spring component:
</para>
<informalexample>
<programlisting language="java"><![CDATA[
@Component
public class Configurer implements DestructionAwareBeanPostProcessor, ServletContextAware
{
    private BayeuxServer bayeuxServer;
    private ServerAnnotationProcessor processor;

    @Inject
    private void setBayeuxServer(BayeuxServer bayeuxServer)
    {
        this.bayeuxServer = bayeuxServer;
    }

    @PostConstruct
    private void init()
    {
        this.processor = new ServerAnnotationProcessor(bayeuxServer);
    }

    public Object postProcessBeforeInitialization(Object bean, String name) throws BeansException
    {
        processor.processDependencies(bean);
        processor.processConfigurations(bean);
        processor.processCallbacks(bean);
        return bean;
    }

    public Object postProcessAfterInitialization(Object bean, String name) throws BeansException
    {
        return bean;
    }

    public void postProcessBeforeDestruction(Object bean, String name) throws BeansException
    {
        processor.deprocessCallbacks(bean);
    }

    @Bean(initMethod = "start", destroyMethod = "stop")
    public BayeuxServer bayeuxServer()
    {
        BayeuxServerImpl bean = new BayeuxServerImpl();
        bean.setOption(BayeuxServerImpl.LOG_LEVEL, "3");
        return bean;
    }

    public void setServletContext(ServletContext servletContext)
    {
        servletContext.setAttribute(BayeuxServer.ATTRIBUTE, bayeuxServer);
    }
}
]]></programlisting>
</informalexample>
<para>
    Summary:
</para>
<itemizedlist>
<listitem>
<para>
    This Spring component is the factory for the BayeuxServer object via the <code>bayeuxServer()</code>
    method (annotated with Spring's <code>@Bean</code>).
</para>
</listitem>
<listitem>
<para>
    Creating CometD's <code>ServerAnnotationProcessor</code> requires the BayeuxServer object, and therefore
    it <code>@Injects</code> it into a setter method.
</para>
</listitem>
<listitem>
<para>
    The lifecycle callback <code>init()</code> creates CometD's <code>ServerAnnotationProcessor</code>,
    which is then used during Spring's bean post processing phases.
</para>
</listitem>
<listitem>
<para>
    Finally, the BayeuxServer object is exported into the servlet context for the CometD servlet to use.
</para>
</listitem>
</itemizedlist>
</section>
</section>
