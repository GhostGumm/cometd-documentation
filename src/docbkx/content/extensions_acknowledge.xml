<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd
                             http://www.w3.org/1999/xlink http://docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:id="extensions_acknowledge">
<info>
    <title>Message Acknowledgment Extension</title>
</info>
<para>
    By default, CometD does not enforce a strict order on server-to-client message delivery, nor it provides
    the guarantee that messages sent by the server are received by the clients.
</para>
<para>
    The <emphasis>message acknowledgment</emphasis> extension provides message ordering and message reliability
    to the Bayeux protocol for messages sent from server to client.
    This extension requires both a client-side extension and a server-side extension.
    The server-side extension is available in Java.
    If you are interested only in message ordering (and not reliability), see
    <xref linkend="extensions_acknowledge_ordering" />.
</para>
<section>
<info>
    <title>Enabling the Server-side Message Acknowledgment Extension</title>
</info>
<para>
    To enable support for acknowledged messages, you must add the extension to the
    <classname>org.cometd.bayeux.server.BayeuxServer</classname> instance during initialization:
</para>
<informalexample>
<programlisting language="java"><![CDATA[
bayeuxServer.addExtension(new org.cometd.server.ext.AcknowledgedMessagesExtension());
]]></programlisting>
</informalexample>
<para>
    The <code>AcknowledgedMessageExtension</code> is a per-server extension that monitors handshakes from new
    remote clients, looking for those that also support the acknowledged message extension, and then adds the
    <code>AcknowledgedMessagesClientExtension</code> to the <code>ServerSession</code> correspondent to the
    remote client, during the handshake processing.
</para>
<para>
    Once added to a <code>ServerSession</code>, the <classname>AcknowledgedMessagesClientExtension</classname>
    guarantees ordered delivery of messages, and resend of unacknowledged messages, from server to client.
    The extension also maintains a list of unacknowledged messages and intercepts the traffic on the
    <code>/meta/connect</code> channel to insert and check acknowledge IDs.
</para>
</section>
<section>
<info>
    <title>Enabling the Client-side Message Acknowledgment Extension</title>
</info>
<para>
    The <code>dojox/cometd/ack.js</code> provides the client-side extension binding for Dojo, and it is sufficient
    to use Dojo's <code>dojo.require</code> mechanism:
</para>
<informalexample>
<programlisting language="javascript"><![CDATA[
dojo.require("dojox.cometd.ack");
]]></programlisting>
</informalexample>
<para>
    The file <code>jquery.cometd-ack.js</code> provides the client-side extension binding for jQuery.
    You must include this file in the HTML page via the <code>&lt;script&gt;</code> tag:
</para>
<informalexample>
<programlisting language="javascript"><![CDATA[
<script type="text/javascript" src="AckExtension.js"></script>
<script type="text/javascript" src="jquery.cometd-ack.js"></script>
]]></programlisting>
</informalexample>
<para>
    In both Dojo and jQuery extension bindings, the extension is registered on the default <code>cometd</code>
    object under the name <emphasis>ack</emphasis>.
</para>
<para>
    Furthermore, you can programmatically disable/enable the extension before initialization by setting the
    <code>ackEnabled</code> boolean field on the <code>cometd</code> object:
</para>
<informalexample>
<programlisting language="javascript"><![CDATA[
// Disables the ack extension during handshake
cometd.ackEnabled = false;
cometd.init(cometdURL);
]]></programlisting>
</informalexample>
</section>
<section>
<info>
    <title>Acknowledge Extension Details</title>
</info>
<para>
    To enable message acknowledgement, both client and server must indicate that they support message acknowledgement.
    This is negotiated during handshake. On handshake, the client sends <code>{"ext":{"ack": "true"}}</code> to
    indicate that it supports message acknowledgement.
    If the server also supports message acknowledgement, it likewise replies with <code>{"ext":{"ack": "true"}}</code>.
</para>
<para>
    The extension does not insert ack IDs in every message, as this would impose a significant burden on the server
    for messages sent to multiple clients (which would need to be reserialized to JSON for each client).
    Instead the ack ID is inserted in the <code>ext</code> field of the <code>/meta/connect</code> messages that are
    associated with message delivery.
    Each <code>/meta/connect</code> request contains the ack ID of the last received ack response:
    <code>"ext":{"ack": 42}</code>.
    Similarly, each <code>/meta/connect</code> response contains an ext ack ID that uniquely identifies the batch
    of responses sent.
</para>
<para>
    If a <code>/meta/connect</code> message is received with an ack ID lower that any unacknowledged messages
    held by the extension, then these messages are requeued prior to any more recently queued messages and the
    <code>/meta/connect</code> response sent with a new ack ID.
</para>
<para>
    It is important to note that message acknowledgement is guaranteed from server to client only, and not from client
    to server. This means that the ack extension guarantees that messages sent by the server to the clients will be
    resent in case of temporary network failures that produce loss of messages.
    It does not guarantee however, that messages sent by the client will reach the server.
</para>
</section>
<section xml:id="extensions_acknowledge_ordering">
<info>
    <title>Message Ordering</title>
</info>
<para>
    Message ordering is not enforced by default by CometD.
    A CometD server has two ways to deliver the messages present
    in the <code>ServerSession</code> queue to its correspondent remote client:
    <itemizedlist>
        <listitem>
            <para>through <code>/meta/connect</code> responses</para>
        </listitem>
    </itemizedlist>
    <itemizedlist>
        <listitem>
            <para>through direct responses</para>
        </listitem>
    </itemizedlist>
</para>
<para>
    Delivery through a <code>/meta/connect</code> response means that the server will deliver the messages
    present in the <code>ServerSession</code> queue along with a <code>/meta/connect</code> response, so
    that the messages delivered to the remote client are:
    <code>[{/meta/connect response message}, {queued message 1}, {queued message 2}, ...]</code>.
</para>
<para>
    Direct delivery depends on the transport.
</para>
<para>
    For polling transports it means that the server will deliver the messages present in the
    <code>ServerSession</code> queue along with some other response message that is being processed in that moment.
    For example, let's assume that <code>clientA</code> is already subscribed to channel <code>/foo</code>,
    and that it wants to subscribe also to channel <code>/bar</code>. Then <code>clientA</code> sends a
    subscription request for channel <code>/bar</code> to the server, and just before processing the subscription
    request for channel<code>/bar</code>, the server receives a message on channel <code>/foo</code>, that
    therefore needs to be delivered to <code>clientA</code> (for example, <code>clientB</code> published a
    message to channel<code>/foo</code>, or an external system produced a message on channel <code>/foo</code>).
    The message on channel <code>/foo</code> gets queued on <code>clientA</code>'s <code>ServerSession</code>.
    However, the server notices that it has to reply to subscription request for <code>/bar</code>, so
    it includes the message on channel <code>/foo</code> in that response, thus avoiding to wake up
    the <code>/meta/connect</code>, so that the messages delivered to the remote client are:
    <code>[{subscription response message for /bar}, {queued message on /foo}]</code>.
</para>
<para>
    For non-polling transports such as <code>websocket</code> the server will just deliver the messages
    present in the <code>ServerSession</code> queue without waking up the <code>/meta/connect</code>,
    because non-polling transports have a way to send server-to-client messages without the need to have a
    pending response onto which the <code>ServerSession</code>'s queued messages are piggybacked.
</para>
<para>
    These two ways of delivering messages compete each other to deliver messages with the smallest latency.
    Therefore it is possible that a server receives from an external system two messages to be delivered for
    the same client, say <code>message1</code> first and then <code>message2</code>; <code>message1</code> is
    queued and immediately dequeued by a direct delivery, while <code>message2</code> is queued and then
    dequeued by a <code>/meta/connect</code> delivery.
    The client may see <code>message2</code> arriving before <code>message1</code>, for example because the
    thread scheduling on the server favored <code>message2</code>'s processing or because the TCP communication
    for <code>message1</code> was somehow slowed down (not to mention that browsers could as well be source of
    uncertainty).
</para>
<para>
    To enable just server-to-client message ordering (but not reliability), you need to configure the server
    with the <code>metaConnectDeliverOnly</code> parameter, as explained in
    <xref linkend="java_server_configuration" />.
</para>
<para>
    When server-to-client message ordering is enabled, all messages will be delivered through
    <code>meta/connect</code> responses.
    In the example above, <code>message1</code> will be delivered to the client, and <code>message2</code>
    will wait on the server until another <code>meta/connect</code> is issued by the client (which happens
    immediately after <code>message1</code> has been received by the client).
    When the server receives the second <code>meta/connect</code> request, it will respond to it immediately
    and deliver <code>message2</code> to the client.
</para>
<para>
    It is clear that server-to-client message ordering comes at the small price of slightly increased latencies
    (<code>message2</code> has to wait the next <code>meta/connect</code> before being delivered), and slightly
    more activity for the server (since <code>meta/connect</code>s will be resumed more frequently than normal).
</para>
</section>
<section>
<info>
    <title>Demo</title>
</info>
<para>
    There is an example of acknowledged messages in the Dojo chat demo that comes bundled with the CometD distribution,
    and instruction on how to run the CometD demos in <xref linkend="installation_demos"/>.
</para>
<para>
    To run the acknowledgement demo, follow these steps:
</para>
<orderedlist>
<listitem>
<para>Start CometD</para>
</listitem>
<informalexample>
<programlisting><![CDATA[
$ cd cometd-demo
$ mvn jetty:run
]]></programlisting>
</informalexample>
<listitem>
<para>
    Point your browser to http://localhost:8080/dojo-examples/chat/ and make sure to check
    <emphasis>Enable reliable messaging</emphasis>.
</para>
</listitem>
<listitem>
<para>
    Use two different browser instances to begin a chat session, then briefly disconnect one browser from the
    network (you can do this by setting the <emphasis>work offline</emphasis> feature).
</para>
</listitem>
<listitem>
<para>
    While one browser is disconnected, type some chat in the other browser, which is received when the disconnected
    browser reconnects to the network.
</para>
</listitem>
</orderedlist>
<para>
    Notice that if the disconnected browser is disconnected in excess of maxInterval (default 10s), the client
    times out and the unacknowledged queue is discarded.
</para>
</section>
</section>
