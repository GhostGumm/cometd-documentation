<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd
                             http://www.w3.org/1999/xlink http://docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:id="extensions_acknowledge">
<info>
    <title>Acknowledge Extension</title>
</info>
<para>
    The <emphasis>acknowledge messages</emphasis> extension provides reliable, ordered messaging to the Bayeux
    protocol from server to client.
    This extension requires both a client-side extension and a server-side extension.
    The server-side extension is available in Java.
    If you are interested only in ordered messaging, see <!-- TODO: relink to docbook section -->
    <link xl:href="http://cometd.org/documentation/2.x/howtos/message-ordering">here</link>.
</para>
<section>
<info>
    <title>Enabling the Server-side Extension</title>
</info>
<para>
    To enable support for acknowledged messages, you must add the extension to the
    <classname>org.cometd.bayeux.server.BayeuxServer</classname> instance during initialization:
</para>
<informalexample>
<programlisting language="java"><![CDATA[
bayeuxServer.addExtension(new org.cometd.server.ext.AcknowledgedMessagesExtension());
]]></programlisting>
</informalexample>
<para>
    The <code>AcknowledgedMessageExtension</code> is a per-server extension that monitors handshakes from new
    remote clients, looking for those that also support the acknowledged message extension, and then adds the
    <code>AcknowledgedMessagesClientExtension</code> to the <code>ServerSession</code> correspondent to the
    remote client, during the handshake processing.
</para>
<para>
    Once added to a <code>ServerSession</code>, the <classname>AcknowledgedMessagesClientExtension</classname>
    guarantees ordered delivery of messages, and resend of unacknowledged messages, from server to client.
    The extension also maintains a list of unacknowledged messages and intercepts the traffic on the
    <code>/meta/connect</code> channel to insert and check acknowledge IDs.
</para>
</section>
<section>
<info>
    <title>Enabling the Client-side Extension</title>
</info>
<para>
    The <code>dojox/cometd/ack.js</code> provides the client-side extension binding for Dojo, and it is sufficient
    to use Dojo's <code>dojo.require</code> mechanism:
</para>
<informalexample>
<programlisting language="javascript"><![CDATA[
dojo.require("dojox.cometd.ack");
]]></programlisting>
</informalexample>
<para>
    The file <code>jquery.cometd-ack.js</code> provides the client-side extension binding for jQuery.
    You must include this file in the HTML page via the <code>&lt;script&gt;</code> tag:
</para>
<informalexample>
<programlisting language="javascript"><![CDATA[
<script type="text/javascript" src="AckExtension.js"></script>
<script type="text/javascript" src="jquery.cometd-ack.js"></script>
]]></programlisting>
</informalexample>
<para>
    In both Dojo and jQuery extension bindings, the extension is registered on the default <code>cometd</code>
    object under the name <emphasis>ack</emphasis>.
</para>
<para>
    Furthermore, you can programmatically disable/enable the extension before initialization by setting the
    <code>ackEnabled</code> boolean field on the <code>cometd</code> object:
</para>
<informalexample>
<programlisting language="javascript"><![CDATA[
// Disables the ack extension during handshake
cometd.ackEnabled = false;
cometd.init(cometdURL);
]]></programlisting>
</informalexample>
</section>
<section>
<info>
    <title>Acknowledge Extension Details</title>
</info>
<para>
    To enable message acknowledgement, both client and server must indicate that they support message acknowledgement.
    This is negotiated during handshake. On handshake, the client sends <code>{"ext":{"ack": "true"}}</code> to
    indicate that it supports message acknowledgement.
    If the server also supports message acknowledgement, it likewise replies with <code>{"ext":{"ack": "true"}}</code>.
</para>
<para>
    The extension does not insert ack IDs in every message, as this would impose a significant burden on the server
    for messages sent to multiple clients (which would need to be reserialized to JSON for each client).
    Instead the ack ID is inserted in the <code>ext</code> field of the <code>/meta/connect</code> messages that are
    associated with message delivery.
    Each <code>/meta/connect</code> request contains the ack ID of the last received ack response:
    <code>"ext":{"ack": 42}</code>.
    Similarly, each <code>/meta/connect</code> response contains an ext ack ID that uniquely identifies the batch
    of responses sent.
</para>
<para>
    If a <code>/meta/connect</code> message is received with an ack ID lower that any unacknowledged messages
    held by the extension, then these messages are requeued prior to any more recently queued messages and the
    <code>/meta/connect</code> response sent with a new ack ID.
</para>
<para>
    It is important to note that message acknowledgement is guaranteed from server to client only, and not from client
    to server. This means that the ack extension guarantees that messages sent by the server to the clients will be
    resent in case of temporary network failures that produce loss of messages.
    It does not guarantee however, that messages sent by the client will reach the server.
</para>
</section>
<section>
<info>
    <title>Demo</title>
</info>
<para>
    There is an example of acknowledged messages in the Dojo chat demo that comes bundled with the CometD distribution,
    and instruction on how to run the CometD demos in <xref linkend="installation_demos"/>.
</para>
<para>
    To run the acknowledgement demo, follow these steps:
</para>
<orderedlist>
<listitem>
<para>Start CometD</para>
</listitem>
<informalexample>
<programlisting><![CDATA[
$ cd cometd-demo
$ mvn jetty:run
]]></programlisting>
</informalexample>
<listitem>
<para>
    Point your browser to http://localhost:8080/dojo-examples/chat/ and make sure to check
    <emphasis>Enable reliable messaging</emphasis>.
</para>
</listitem>
<listitem>
<para>
    Use two different browser instances to begin a chat session, then briefly disconnect one browser from the
    network (you can do this by setting the <emphasis>work offline</emphasis> feature).
</para>
</listitem>
<listitem>
<para>
    While one browser is disconnected, type some chat in the other browser, which is received when the disconnected
    browser reconnects to the network.
</para>
</listitem>
</orderedlist>
<para>
    Notice that if the disconnected browser is disconnected in excess of maxInterval (default 10s), the client
    times out and the unacknowledged queue is discarded.
</para>
</section>
</section>
