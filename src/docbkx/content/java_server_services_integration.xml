<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xml:id="java_server_services_integration">
<info>
    <title>Services Integration</title>
</info>
<para>
There are several ways to integrate your Bayeux services into your web application. This is complicated because a servlet creates the BayeuxServer object, and there is no easy way to detect, in general, when the BayeuxServer object has been created.
</para>
<section>
<info>
    <title>Integration via Configuration Servlet</title>
</info>
<para>
The simplest way to initialize your web application with your services is to use a configuration servlet. This configuration servlet has no URL mapping because its only scope is to initialize (or "wire" together) services for your web application to work properly.
</para>
<para>
Here is a sample <code>web.xml</code>:
</para>
<informalexample>
<programlisting language="xml"><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://java.sun.com/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
         version="2.5">

    <servlet>
        <servlet-name>cometd</servlet-name>
        <servlet-class>org.cometd.server.CometdServlet</servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>cometd</servlet-name>
        <url-pattern>/cometd/*</url-pattern>
    </servlet-mapping>

    <servlet>
        <servlet-name>configuration</servlet-name>
        <servlet-class>com.acme.cometd.ConfigurationServlet</servlet-class>
        <load-on-startup>2</load-on-startup>
    </servlet>

</web-app>
]]></programlisting>
</informalexample>
<para>
Notice that the <code>web.xml</code> file specifies <code>&lt;load-on-startup&gt;</code> to be:
</para>
<itemizedlist>
<listitem>
<para>1 for the CometD servlet–so that the Bayeux object gets created and put in the <code>ServletContext</code>.</para>
</listitem>
<listitem>
<para>2 for the configuration servlet–so that it will be initialized only after the CometD servlet has been initialized and hence the BayeuxServer object be available.</para>
</listitem>
</itemizedlist>
<para>
This is the code for the <code>ConfigurationServlet</code>:
</para>
<informalexample>
<programlisting language="java"><![CDATA[
public class ConfigurationServlet extends GenericServlet
{
    public void init() throws ServletException
    {
        // Grab the Bayeux object
        BayeuxServer bayeux = (BayeuxServer)getServletContext().getAttribute(BayeuxServer.ATTRIBUTE);
        new EchoService(bayeux);
        // Create other services here

        // This is also the place where you can configure the Bayeux object
        // by adding extensions or specifying a SecurityPolicy
    }

    public void service(ServletRequest request, ServletResponse response) throws ServletException, IOException
    {
        throw new ServletException();
    }
}
]]></programlisting>
</informalexample>
<para>
See <xref linkend="java_server_services_inherited" /> about the <code>EchoService</code>.
</para>
</section>
<section>
<info>
    <title>Integration via Configuration Listener</title>
</info>
<para>
Instead of using a configuration servlet, it is possible to use a configuration listener, by writing a class that implements <code>ServletContextAttributeListener</code>.
</para>
<para>
Here is a sample <code>web.xml</code> file:
</para>
<informalexample>
<programlisting language="xml"><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://java.sun.com/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
         version="2.5">

    <servlet>
        <servlet-name>cometd</servlet-name>
        <servlet-class>org.cometd.server.CometdServlet</servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>cometd</servlet-name>
        <url-pattern>/cometd/*</url-pattern>
    </servlet-mapping>

    <listener>
        <listener-class>com.acme.cometd.BayeuxInitializer</listener-class>
    </listener>

</web-app>
]]></programlisting>
</informalexample>
<para>
This is the code for the <code>BayeuxInitializer</code>:
</para>
<informalexample>
<programlisting language="java"><![CDATA[
public class BayeuxInitializer implements ServletContextAttributeListener
{
    public void attributeAdded(ServletContextAttributeEvent event)
    {
        if (Bayeux.ATTRIBUTE.equals(event.getName()))
        {
            // Grab the Bayeux object
            BayeuxServer bayeux = (BayeuxServer)event.getValue();
            new EchoService(bayeux);
            // Create other services here

            // This is also the place where you can configure the Bayeux object
            // by adding extensions or specifying a SecurityPolicy
        }
    }

    public void attributeRemoved(ServletContextAttributeEvent event)
    {
    }

    public void attributeReplaced(ServletContextAttributeEvent event)
    {
    }
}
]]></programlisting>
</informalexample>
</section>
<section>
<info>
    <title>Integration of Annotated Services</title>
</info>
<para>
If you prefer to use annotated services (see <xref linkend="java_server_services_inherited" />, you still have to integrate them into your web application. The procedure is very similar to the procedures above, but it requires use of the annotation processor to process the annotations in your services.
</para>
<para>
For example, the <code>ConfigurationServlet</code> becomes:
</para>
<informalexample>
<programlisting language="java"><![CDATA[
public class ConfigurationServlet extends GenericServlet
{
    private final List<Object> services = new ArrayList<Object>();
    private ServerAnnotationProcessor processor;

    public void init() throws ServletException
    {
        // Grab the BayeuxServer object
        BayeuxServer bayeux = (BayeuxServer)getServletContext().getAttribute(BayeuxServer.ATTRIBUTE);

        // Create the annotation processor
        processor = new ServerAnnotationProcessor(bayeux);

        // Create your annotated service instance and process it
        Object service = new EchoService();
        processor.process(service);
        services.add(service);

        // Create other services here

        // This is also the place where you can configure the Bayeux object
        // by adding extensions or specifying a SecurityPolicy
    }

    public void destroy() throws ServletException
    {
        // Deprocess the services that have been created
        for (Object service : services)
            processor.deprocess(service);
    }

    public void service(ServletRequest request, ServletResponse response) throws ServletException, IOException
    {
        throw new ServletException();
    }
}
]]></programlisting>
</informalexample>
</section>
<section>
<info>
    <title>Integration of Annotated Services via <code>AnnotationCometdServlet</code></title>
</info>
<para>
The <code>org.cometd.java.annotation.AnnotationCometdServlet</code> allows to specify a comma separared list of class names to instantiate and process using a <code>ServerAnnotationProcessor</code>.
</para>
<para>
This is a sample <code>web.xml</code>:
</para>
<informalexample>
<programlisting language="xml"><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://java.sun.com/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
         version="2.5">

    <servlet>
        <servlet-name>cometd</servlet-name>
        <servlet-class>org.cometd.java.annotation.AnnotationCometdServlet</servlet-class>
        <init-param>
            <param-name>services</param-name>
            <param-value>com.acme.cometd.FooService, com.acme.cometd.BarService</param-value>
        </init-param>
    </servlet>
    <servlet-mapping>
        <servlet-name>cometd</servlet-name>
        <url-pattern>/cometd/*</url-pattern>
    </servlet-mapping>

</web-app>
]]></programlisting>
</informalexample>
<para>
In this example, the <code>AnnotationCometdServlet</code> instantiates and processes the annotations of one object of class <code>com.acme.cometd.FooService</code> and of one object of class <code>com.acme.cometd.BarService</code>.
The services created are deprocessed when <code>AnnotationCometdServlet</code> is destroyed.
</para>
</section>
</section>
