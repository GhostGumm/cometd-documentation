<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd
                             http://www.w3.org/1999/xlink http://docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:id="java_server_jmx">
<info>
    <title>JMX Integration</title>
</info>
<para>
    Server-side CometD components may be exposed as JMX MBeans and visible via monitoring tools such as
    <link xl:href="http://docs.oracle.com/javase/7/docs/technotes/guides/management/jconsole.html">JConsole</link> or
    <link xl:href="http://docs.oracle.com/javase/7/docs/technotes/tools/share/jvisualvm.html">JVisualVM</link>.
</para>
<para>
    CometD MBeans build on Jetty's JMX support, and are portable across servlet containers.
</para>

<section xml:id="java_server_jmx_jetty">
<info>
    <title>JMX Integration in Jetty</title>
</info>
<para>
    If your CometD application is deployed in Jetty, then it is enough that you modify <filename>web.xml</filename>
    by adding a Jetty-specific context parameter:
</para>
<informalexample>
<programlisting language="xml"><![CDATA[
<?xml version="1.0" encoding="ISO-8859-1"?>
<web-app xmlns="http://java.sun.com/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
         version="2.5">

    <context-param>
        <param-name>org.eclipse.jetty.server.context.ManagedAttributes</param-name>
        <param-value>org.cometd.bayeux,org.cometd.oort.Oort</param-value>
    </context-param>

    <!-- The rest of your web.xml -->
</webapp>
]]></programlisting>
</informalexample>
<para>
    The value of the context parameter is a comma separated list of attribute names stored in the servlet
    context.
    The CometD implementation stores for you the <code>BayeuxServer</code> instance in the servlet context
    under the name defined by the constant <code>BayeuxServer.ATTRIBUTE</code> which is indeed the string
    <code>org.cometd.bayeux</code> that you can find in the example above as the value of the context parameter.
</para>
<para>
    Similarly, the CometD implementation stores the <code>Oort</code> instance and <code>Seti</code> instance
    in the servlet context under the names defined - respectively - by the constants <code>Oort.OORT_ATTRIBUTE</code>
    and <code>Seti.SETI_ATTRIBUTE</code>, equivalent to the strings <code>org.cometd.oort.Oort</code> and
    <code>org.cometd.oort.Seti</code> respectively.
</para>
<para>
    Optionally, remember that annotated service instances
    (see<xref linkend="java_server_services_annotated_server_side" />)
    are stored in the servlet context, and as such are candidate to use the same mechanism to be exposed
    as MBeans, provided that you define the right Jetty JMX MBean metadata descriptors.
</para>
<para>
    This is all you need to do to export CometD MBeans when running within Jetty.
</para>
</section>

<section xml:id="java_server_jmx_others">
<info>
    <title>JMX Integration in Other Servlet Containers</title>
</info>
<para>
    The context parameter configured above can be left in the <filename>web.xml</filename> even if your application
    is deployed in other Servlet containers, as it will only be detected by Jetty.
</para>
<para>
    In order to leverage Jetty's JMX support in other Servlet containers, it is enough that you include the
    <filename>jetty-jmx-&lt;version&gt;.jar</filename> in your <code>WEB-INF/lib</code> directory of your web
    application.
    This jar contains Jetty's JMX utility classes that can be used to easily export CometD MBeans.
</para>
<para>
    Exporting CometD MBeans in other Servlet containers require a little bit more setup than what is needed in Jetty,
    but it is easily done with a small initializer class.
    Refer to <xref linkend="java_server_services_integration" /> for a broader discussion of how to initialize
    CometD components.
</para>
<para>
    A simple example of such initializer class is the following:
</para>
<informalexample>
<programlisting language="java"><![CDATA[
import java.io.IOException;
import java.lang.management.ManagementFactory;
import javax.servlet.GenericServlet;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import org.cometd.bayeux.server.BayeuxServer;
import org.eclipse.jetty.jmx.MBeanContainer;

public class CometDJMXExporter extends GenericServlet
{
    private volatile MBeanContainer mbeanContainer;

    @Override
    public void init() throws ServletException
    {
        try
        {
            mbeanContainer = new MBeanContainer(ManagementFactory.getPlatformMBeanServer());
            BayeuxServer bayeuxServer = (BayeuxServer)getServletContext().getAttribute(BayeuxServer.ATTRIBUTE);
            mbeanContainer.addBean(bayeuxServer);
            // Add other components
            mbeanContainer.start();
        }
        catch (Exception x)
        {
            throw new ServletException(x);
        }
    }

    @Override
    public void service(ServletRequest servletRequest, ServletResponse servletResponse) throws ServletException, IOException
    {
        throw new ServletException();
    }

    @Override
    public void destroy()
    {
        try
        {
            mbeanContainer.stop();
        }
        catch (Exception ignored)
        {
        }
    }
}
]]></programlisting>
</informalexample>
<para>
    with the corresponding <code>web.xml</code> configuration:
</para>
<informalexample>
<programlisting language="xml"><![CDATA[
<?xml version="1.0" encoding="ISO-8859-1"?>
<web-app xmlns="http://java.sun.com/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
         version="2.5">

    <!-- The rest of your web.xml -->

    <servlet>
        <servlet-name>jmx-exporter</servlet-name>
        <servlet-class>com.acme.cometd.CometDJMXExporter</servlet-class>
        <!-- Make sure it's the last started -->
        <load-on-startup>2</load-on-startup>
    </servlet>

</webapp>
]]></programlisting>
</informalexample>
<para>
    In this example, <classname>CometDJMXExporter</classname> is a configuration Servlet (and as such it is not
    mapped to any path) that instantiates Jetty's JMX utility class <classname>MBeanContainer</classname>,
    extracts from the servlet context the CometD components that you want to expose as MBeans, and adds
    them to the <classname>MBeanContainer</classname> instance.
    It is doing, programmatically, what Jetty does under the covers for you when it detects the
    <code>org.eclipse.jetty.server.context.ManagedAttributes</code> context parameter in <filename>web.xml</filename>.
</para>
</section>

</section>
