<?xml version="1.0" encoding="UTF-8"?>
<appendix version="5.0"
          xmlns="http://docbook.org/ns/docbook"
          xmlns:xl="http://www.w3.org/1999/xlink"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd
                              http://www.w3.org/1999/xlink http://docbook.org/xml/5.0/xsd/xlink.xsd"
          xml:id="release">
<info>
    <title>Committer Release Instructions</title>
</info>
<para>
    These instructions are only for CometD committers that want to perform a CometD release.
</para>

<simplesect xml:id="release_create">
<info>
    <title>Creating the Release</title>
</info>
<screen>
$ git clone git://github.com/cometd/cometd.git release/cometd
...
$ cd release/cometd
$ mvn clean install
...
$ mvn release:prepare # Specify the SVN tag to be just the version number
...
$ mvn release:perform -Darguments=-Dgpg.passphrase=...
...
$ git push origin master
</screen>
</simplesect>

<simplesect xml:id="release_repository">
<info>
    <title>Managing the Repository</title>
</info>
<para>
    Login to <link xl:href="http://oss.sonatype.org">Sonatype OSS</link>.
</para>
<para>
    Click on "Staging Repositories" and you should see the staged project just uploaded by the
    <code>mvn release:perform</code> command issued above, with status "open".
    Tick the checkbox correspondent to the open staged project, choose "Close" from the toolbar,
    enter a description such as "CometD Release 1.0.0", then click on the "Close" button.
    This will make the staged project downloadable for testing, but not yet published to central.
</para>
<para>
    Tick again the checkbox correspondent to the closed staged project, choose "Release" from the toolbar,
    enter a description such as "CometD Release 1.0.0", then click on the "Release" button.
    This will publish the project to the Maven Central Repository.
</para>
</simplesect>

<simplesect xml:id="release_distribution">
<info>
    <title>Creating the Distribution</title>
</info>
<screen>
$ cd $COMETD
$ git checkout &lt;version&gt;
...
$ mvn clean install -DskipTests=true
...
$ cd cometd-distribution
$ mvn assembly:assembly
</screen>
<para>
    This creates the distribution tarball in the <code>cometd-distribution/target</code> directory.
    The upload it.
</para>
<screen>
$ cd $COMETD/cometd-distribution/target
$ scp cometd-&lt;version&gt;-distribution.tar.gz &lt;user&gt;@download.cometd.org:/srv/www/vhosts.d/download.cometd.org/
</screen>
</simplesect>

<simplesect xml:id="release_archetype">
<info>
    <title>Upload the Archetype Catalog</title>
</info>
<para>
    Make sure the archetype catalog <code>$HOME/.m2/archetype-catalog.xml</code>
    refers to the release just prepared, then upload it.
</para>
<screen>
$ scp $HOME/.m2/archetype-catalog.xml &lt;user&gt;@cometd.org:/srv/www/vhosts.d/cometd.org/
</screen>
</simplesect>

<simplesect xml:id="release_javadocs">
<info>
    <title>Create and Upload the Javadocs</title>
</info>
<screen>
$ cd $COMETD/cometd-java
$ mvn javadoc:aggregate-jar
$ scp target/cometd-java-&lt;version&gt;-javadoc.jar &lt;user&gt;@docs.cometd.org:/srv/www/vhosts.d/docs.cometd.org/
</screen>
<para>
    Then <code>ssh</code> into the host, unzip the javadocs jar file into the <code>apidocs</code> directory.
</para>
</simplesect>

<simplesect xml:id="release_jira">
<info>
    <title>Perform a JIRA Release</title>
</info>
<para>
    Perform a release in <link xl:href="http://bugs.cometd.org">JIRA</link>.
</para>
</simplesect>

<simplesect xml:id="release_dojo">
<info>
    <title>Update the Dojo Bindings</title>
</info>
<screen>
$ git clone https://github.com/cometd/cometd-dojo.git
$ cd cometd-dojo
</screen>
<para>
    Edit the <code>package.json</code> file, updating the CometD version and the Dojo version, then commit it.
</para>
<screen>
$ git push
$ git tag -a "&lt;version&gt;" -m "CometD Release &lt;version&gt;."
$ git push --tags
</screen>
</simplesect>

</appendix>
